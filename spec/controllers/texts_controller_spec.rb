require "rails_helper"
require "securerandom"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::TextsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Text. As you add validations to Text, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { unique_identifier: SecureRandom.uuid }
  end

  let(:invalid_attributes) do
    skip("Add a hash of attributes invalid for your model")
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TextsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Text" do
        expect do
          post :create, params: { text: valid_attributes }, session: valid_session
        end.to change(Text, :count).by(1)
      end

      it "redirects to the created text" do
        post :create, params: { text: valid_attributes }, session: valid_session
        expect(response).to redirect_to(Text.last)
      end
    end

    describe "with invalid params" do
      it "re-renders the 'new' template" do
        post :create, params: { text: invalid_attributes }, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) do
        skip("Add a hash of attributes valid for your model")
      end

      it "updates the requested text" do
        text = Text.create! valid_attributes
        put :update, params: { id: text.to_param, text: new_attributes }, session: valid_session
        text.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the text" do
        text = Text.create! valid_attributes
        put :update, params: { id: text.to_param, text: valid_attributes }, session: valid_session
        expect(response).to redirect_to(text)
      end
    end

    describe "with invalid params" do
      it "re-renders the 'edit' template" do
        text = Text.create! valid_attributes
        put :update, params: { id: text.to_param, text: invalid_attributes }, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested text" do
      text = Text.create! valid_attributes
      expect do
        delete :destroy, params: { id: text.to_param }, session: valid_session
      end.to change(Text, :count).by(-1)
    end

    it "redirects to the texts list" do
      text = Text.create! valid_attributes
      delete :destroy, params: { id: text.to_param }, session: valid_session
      expect(response).to redirect_to(texts_url)
    end
  end
end
