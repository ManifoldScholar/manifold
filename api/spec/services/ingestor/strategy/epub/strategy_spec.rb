require "rails_helper"

RSpec.describe Ingestor::Strategy::EPUB::Strategy do

  shared_examples "output text assertions" do |source_root, unique_identifier|
    describe "the text generated by the ingestion" do

      it "has a title that matches the dublin core language metadata" do
        expect(@text.language).to eq "en"
      end

      it "has a unique_identifier that matches the one specified in the EPUB source" do
        expect(@text.unique_identifier).to eq unique_identifier
      end

      it "has a title that matches the dublin core title metadata" do
        expect(@text.title).to eq "Your title here"
      end

      it "has a title that matches the dublin core rights metadata" do
        rights = "Your rights here"
        expect(@text.rights).to eq rights
      end

      it "has a title that matches the dublin core description metadata" do
        expect(@text.description).to eq "Your description here"
      end

      it "has the correct number of text sections" do
        expect(@text.text_sections.length).to be 4
      end

      it "has an empty landmarks property" do
        expect(@text.landmarks).to eq []
      end

      it "has an empty page list" do
        expect(@text.page_list).to eq []
      end

      it "has the correct number of stylesheets" do
        expect(@text.stylesheets.length).to eq 1
      end

      it "has the correct number of spine entries" do
        expect(@text.spine.length).to eq 4
      end

      it "has a text_section for each spine entry" do
        expect(@text.text_sections.length).to eq 4
      end

      it "has an ingestion_source for each manifest item" do
        expect(@text.ingestion_sources.length).to eq 7
      end

      it "sets the creator correctly" do
        author = @text.creators.first
        expect(author.first_name).to eq "Andrew"
        expect(author.last_name).to eq "Culp"
      end

      it "has a cover image" do
        expect(@text.cover.present?).to be true
      end

      describe "the generated ingestion sources" do

        it "has a source_path property equal to the relative path within the package" do
          section = @text.text_sections.find_by(name: "Section 1")
          expect(section.source_path).to eq "#{source_root}/xhtml/section0001.xhtml"
        end

      end

      describe "its table of contents" do

        it "has the correct number of entries" do
          toc = @text.toc
          expect(toc.length).to be 3
          expect(toc[1][:children].length).to be 1
        end

        it "has the correct labels" do
          toc = @text.toc
          expect(toc.map { |i| i[:label] }).to eq ["Section 1", "Section 2", "Section 3"]
          expect(toc[1][:children][0][:label]).to eq "Section 2.a"
        end

        it "assigns a text_section ID to each item" do
          def walk(array)
            ids = []
            array.each do |hash|
              ids.push hash[:id]
              if hash.key? :children
                ids.concat walk(hash[:children])
              end
            end
            ids
          end
          expect(walk(@text.toc).any? { |i| i.nil?}).to be false
        end
      end

    end
  end

  after(:all) do
    Ingestor.reset_logger
  end

  context "when ingesting a V3 EPUB", :integration do
    before(:all) {
      Ingestor.logger = NullLogger.new
      @creator = FactoryGirl.create(:user)
      @epub = Rails.root.join("spec", "data", "ingestion", "epubs", "minimal-v3" )
      @text = Ingestor.ingest(@epub, @creator, Ingestor::Strategy::EPUB::Strategy)
    }
    include_examples "output text assertions", "EPUB", "test-v3"
  end


  context "when ingesting a V2 EPUB", :integration do
    before(:all) {
      Ingestor.logger = NullLogger.new
      @creator = FactoryGirl.create(:user)
      @epub = Rails.root.join("spec", "data", "ingestion", "epubs", "minimal-v2" )
      @text = Ingestor.ingest(@epub, @creator, Ingestor::Strategy::EPUB::Strategy)
    }
    include_examples "output text assertions", "OEBPS", "test-v2"
  end

end
