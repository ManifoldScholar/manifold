require "rails_helper"

RSpec.describe Ingestor::Strategy::Markdown::Strategy do

  before(:all) {
    @creator = FactoryGirl.create(:user)
    @source = Rails.root.join("spec", "data", "ingestion", "markdown", "minimal" ).to_s
    @strategy = Ingestor::Strategy::Markdown::Strategy
    @logger = NullLogger.new
    Ingestor.logger = @logger
  }

  after(:all) do
    Ingestor.reset_logger
  end

  shared_examples "output text assertions" do

    describe "the text generated by the ingestion" do

      it "has a language value that matches the dublin core language meta tag" do
        expect(@text.language).to eq "en"
      end

      it "has a title that matches the dublin core title meta tag" do
        expect(@text.title).to eq "title"
      end

      it "has a rights value that matches the dublin core rights meta tag" do
        expect(@text.rights).to eq "rights"
      end

      it "has a description value that matches the dublin core description meta tag" do
        expect(@text.description).to eq "description"
      end

      it "has the correct number of text sections" do
        expect(@text.text_sections.length).to be 6
      end

      it "has an empty landmarks property" do
        expect(@text.landmarks).to eq []
      end

      it "has an empty page list" do
        expect(@text.page_list).to eq []
      end

      it "has the correct number of stylesheets" do
        expect(@text.stylesheets.length).to eq 1
      end

      it "has the correct number of spine entries" do
        expect(@text.spine.length).to eq 4
      end

      it "has the correct number of ingestion sources" do
        expect(@text.ingestion_sources.length).to eq 8
      end

      it "has a navigation text section" do
        expect(@text.toc_section).to_not be nil
      end

      describe "the generated ingestion sources" do

        it "has a source_path property equal to the relative path within the package" do
          section = @text.text_sections.find_by(name: "Section 1")
          expect(section.source_path).to eq "documents/section_1.md"
        end

      end

      describe "its table of contents" do

        it "has the correct number of entries" do
          toc = @text.toc
          expect(toc.length).to be 3
          expect(toc[1][:children].length).to be 1
        end

        it "has the correct labels" do
          toc = @text.toc
          expect(toc.map { |i| i[:label] }).to eq ["Section 1", "Section 2", "Section 3"]
          expect(toc[1][:children][0][:label]).to eq "Section 2.a"
        end

        it "assigns a text_section ID to each item" do
          def walk(array)
            ids = []
            array.each do |hash|
              ids.push hash[:id]
              if hash.key? :children
                ids.concat walk(hash[:children])
              end
            end
            ids
          end
          expect(walk(@text.toc).any? { |i| i.nil?}).to be false
        end
      end

    end

  end

  context "when the source is a directory", :integration do
    before(:all) { @text = Ingestor.ingest(@source, @creator, @strategy) }
    include_examples "output text assertions", @text
  end

  context "when the source is a zip", :integration do
    before(:all) { @text = Ingestor.ingest("#{@source}.zip", @creator, @strategy) }
    include_examples "output text assertions", @text
  end

  context "when the source is a zip without a root dir", :integration do
    before(:all) { @text = Ingestor.ingest("#{@source}_no_root.zip", @creator, @strategy) }
    include_examples "output text assertions", @text
  end

  it "ingests markdown documents without a stylesheet", :integration do
    ingestion = Ingestor::Ingestion.new(@source, @creator, @logger)
    ingestion.delete("styles/website.css")
    text = @strategy.ingest(ingestion)
    expect(text).to be_a Text
  end

end
