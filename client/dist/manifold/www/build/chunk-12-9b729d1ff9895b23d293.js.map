{"version":3,"sources":["webpack:///./src/backend/components/authoring/TOCList/TOCEntry.js","webpack:///./src/backend/components/authoring/TOCList/List.js"],"names":["TOCEntry","entry","depth","innerRef","draggableProps","dragHandleProps","isDragging","isdropTarget","textId","onDelete","onCollapse","onExpand","t","useTranslation","editUrl","lh","link","id","collapseExpandHandler","isExpanded","icon","ref","$isDragging","$depth","$isTarget","onClick","aria-label","IconComposer","size","as","Link","to","aria-describedby","hasChildren","style","marginBlockStart","data","title","displayName","propTypes","PropTypes","object","isRequired","number","func","bool","setCombine","combine","string","isStart","onSetStart","TOCList","tree","setTree","error","setError","useState","dragging","setDragging","Object","keys","items","length","pageHeightCount","setPageHeightCount","dropzoneCount","setDropzoneCount","updateText","useApiCallback","textsAPI","update","async","toDelete","entryId","getNestedTreeChildren","removeKeys","newToc","formatTOCData","res","attributes","toc","errors","formatTreeData","errorMessage","Array","isArray","map","e","detail","join","className","$count","Tree","renderItem","item","provided","snapshot","combineTargetFor","placeholder","mutateTree","nestedCount","getCollapseCount","onDragStart","onDragEnd","source","destination","finalDestination","parentId","isNaN","index","getRootParentPosition","isValidParent","getParentId","moveItemOnTree","newTree","onReorderTOC","isDragEnabled","isNestingEnabled","offsetPerLevel"],"mappings":"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","file":"build/chunk-12-9b729d1ff9895b23d293.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Utility from \"global/components/utility\";\nimport { Link } from \"react-router-dom\";\nimport lh from \"helpers/linkHandler\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Styled from \"./styles\";\n\nexport default function TOCEntry({\n  entry,\n  depth,\n  innerRef,\n  draggableProps,\n  dragHandleProps,\n  isDragging,\n  isdropTarget,\n  textId,\n  onDelete,\n  onCollapse,\n  onExpand\n}) {\n  const { t } = useTranslation();\n\n  const editUrl = lh.link(\"backendTextTOCEntryEdit\", textId, entry.id);\n\n  const collapseExpandHandler = entry.isExpanded ? onCollapse : onExpand;\n  const icon = entry.isExpanded ? \"DisclosureUp32\" : \"DisclosureDown32\";\n\n  return (\n    <Styled.Item ref={innerRef} {...draggableProps}>\n      <Styled.Inner\n        $isDragging={isDragging}\n        $depth={depth}\n        $isTarget={isdropTarget}\n      >\n        <Styled.ButtonGroup>\n          <Styled.Button\n            onClick={() => onDelete(entry.id)}\n            aria-label={t(\"actions.delete\")}\n          >\n            <Utility.IconComposer size={24} icon=\"delete24\" />\n          </Styled.Button>\n          <Styled.Button as={Link} to={editUrl} aria-label={t(\"actions.edit\")}>\n            <Utility.IconComposer size={24} icon=\"annotate24\" />\n          </Styled.Button>\n          <Styled.DragHandle\n            aria-describedby=\"toc-drag-handle-instructions\"\n            {...dragHandleProps}\n          >\n            <Utility.IconComposer size={30} icon=\"grabber32\" />\n          </Styled.DragHandle>\n        </Styled.ButtonGroup>\n        <Styled.TitleWrapper>\n          {entry.hasChildren && (\n            <Styled.Button\n              onClick={collapseExpandHandler}\n              aria-label={t(\"actions.edit\")}\n              style={{ marginBlockStart: \"2px\" }}\n            >\n              <Utility.IconComposer size={28} icon={icon} />\n            </Styled.Button>\n          )}\n          <Styled.Title>{entry.data ? entry.data.title : \"\"}</Styled.Title>\n          {!!depth && <Styled.ChildLink icon=\"tocLink16\" />}\n        </Styled.TitleWrapper>\n      </Styled.Inner>\n    </Styled.Item>\n  );\n}\n\nTOCEntry.displayName = \"Text.TOC.List.Entry\";\n\nTOCEntry.propTypes = {\n  entry: PropTypes.object.isRequired,\n  depth: PropTypes.number.isRequired,\n  innerRef: PropTypes.func,\n  draggableProps: PropTypes.object,\n  dragHandleProps: PropTypes.object,\n  isDragging: PropTypes.bool,\n  setCombine: PropTypes.func,\n  combine: PropTypes.string,\n  textId: PropTypes.string,\n  onDelete: PropTypes.func,\n  isStart: PropTypes.bool,\n  onSetStart: PropTypes.func\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTranslation } from \"react-i18next\";\nimport Tree, { mutateTree, moveItemOnTree } from \"@atlaskit/tree\";\nimport Entry from \"./TOCEntry\";\nimport {\n  formatTOCData,\n  formatTreeData,\n  getNestedTreeChildren,\n  getRootParentPosition,\n  removeKeys,\n  isValidParent,\n  getParentId,\n  getCollapseCount\n} from \"./treeHelpers\";\nimport { textsAPI } from \"api\";\nimport { useApiCallback } from \"hooks\";\nimport * as Styled from \"./styles\";\n\nexport default function TOCList({ tree, setTree, textId, error, setError }) {\n  const { t } = useTranslation();\n\n  const [dragging, setDragging] = useState(false);\n  const [pageHeightCount, setPageHeightCount] = useState(\n    Object.keys(tree.items).length - 1\n  );\n  const [dropzoneCount, setDropzoneCount] = useState(\n    Object.keys(tree.items).length - 1\n  );\n\n  const updateText = useApiCallback(textsAPI.update);\n\n  const onReorderTOC = async newTree => {\n    setError(null);\n    const newToc = formatTOCData(newTree);\n    const res = await updateText(textId, { attributes: { toc: newToc } });\n    if (res?.errors) setError(\"reorder\");\n  };\n\n  const onDelete = async entryId => {\n    setError(null);\n    const toDelete = [entryId, ...getNestedTreeChildren(entryId, tree.items)];\n    const update = removeKeys(toDelete, tree.items);\n    const newToc = formatTOCData({ ...tree, items: update });\n\n    const res = await updateText(textId, { attributes: { toc: newToc } });\n    if (res?.errors) return setError(res.errors);\n    setTree(formatTreeData(newToc));\n  };\n\n  const onDragEnd = async (source, destination) => {\n    setDragging(false);\n    let finalDestination;\n    if (destination.parentId === \"root\" && isNaN(destination.index)) {\n      const rootParentIndex = getRootParentPosition(\n        source.parentId,\n        tree.items\n      );\n      finalDestination = { parentId: \"root\", index: rootParentIndex + 1 };\n    } else if (!isValidParent(destination.parentId, tree.items)) {\n      finalDestination = {\n        parentId: getParentId(destination.parentId, tree.items)\n      };\n    } else {\n      finalDestination = destination;\n    }\n\n    const update = moveItemOnTree(tree, source, finalDestination);\n    onReorderTOC(update);\n\n    setTree(update);\n  };\n\n  const renderItem = ({ item, provided, snapshot, depth }) => {\n    const dragHandleProps = provided.dragHandleProps;\n    delete dragHandleProps[\"aria-roledescription\"];\n\n    const onCollapse = () => {\n      const update = mutateTree(tree, item.id, { isExpanded: false });\n      setTree(update);\n      const nestedCount = getCollapseCount(item, update.items);\n      setPageHeightCount(pageHeightCount - nestedCount);\n    };\n\n    const onExpand = () => {\n      const update = mutateTree(tree, item.id, { isExpanded: true });\n      setTree(update);\n      const nestedCount = getCollapseCount(update.items[item.id], update.items);\n      setPageHeightCount(pageHeightCount + nestedCount);\n    };\n\n    return (\n      <Entry\n        entry={item}\n        depth={depth}\n        innerRef={provided.innerRef}\n        draggableProps={provided.draggableProps}\n        dragHandleProps={dragHandleProps}\n        isDragging={snapshot.isDragging}\n        isdropTarget={snapshot.combineTargetFor}\n        placeholder={provided.placeholder}\n        textId={textId}\n        onDelete={onDelete}\n        onCollapse={onCollapse}\n        onExpand={onExpand}\n      />\n    );\n  };\n\n  /* eslint-disable no-nested-ternary */\n  const errorMessage =\n    error === \"reorder\"\n      ? t(\"errors.toc_reorder\")\n      : Array.isArray(error)\n      ? error.map(e => e.detail).join(\". \")\n      : error;\n  /* eslint-disable no-nested-ternary */\n\n  const onDragStart = id => {\n    setDragging(true);\n    const nestedCount = getCollapseCount(tree.items[id], tree.items);\n    setDropzoneCount(pageHeightCount - nestedCount);\n  };\n\n  return tree ? (\n    <Styled.Wrapper className=\"full-width\" $count={pageHeightCount}>\n      {error && <Styled.Error>{errorMessage}</Styled.Error>}\n      {dragging && <Styled.Dropzone $count={dropzoneCount} />}\n      <Styled.ScrollContainer $count={Object.keys(tree.items).length - 1}>\n        <Tree\n          tree={tree}\n          renderItem={renderItem}\n          onDragStart={onDragStart}\n          onDragEnd={onDragEnd}\n          isDragEnabled\n          isNestingEnabled\n          offsetPerLevel={0}\n        />\n        <span className=\"screen-reader-text\" id=\"toc-drag-handle-instructions\">\n          {t(\"texts.toc.drag_handle_instructions\")}\n        </span>\n      </Styled.ScrollContainer>\n    </Styled.Wrapper>\n  ) : null;\n}\n\nTOCList.displayName = \"Text.TOC.List\";\n\nTOCList.propTypes = {\n  tree: PropTypes.object.isRequired,\n  setTree: PropTypes.func.isRequired,\n  textId: PropTypes.string.isRequired\n};\n"],"sourceRoot":""}