// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Backend Text Metadata Container renders correctly 1`] = `
"<MemoryRouter>
  <Router history={{...}}>
    <Provider store={{...}}>
      <Text.Metadata text={{...}}>
        <Metadata.Form model={{...}} name=\\"backend-project-general\\" update={[Function: update]} create={[Function: create]} className=\\"form-secondary\\">
          <section>
            <withRouter(Connect(HigherOrder.FetchData('Form.Form))) model={{...}} name=\\"backend-project-general\\" update={[Function: update]} create={[Function: create]} className=\\"form-secondary\\">
              <Route>
                <Connect(HigherOrder.FetchData('Form.Form)) model={{...}} name=\\"backend-project-general\\" update={[Function: update]} create={[Function: create]} className=\\"form-secondary\\" match={{...}} location={{...}} history={{...}} staticContext={[undefined]}>
                  <HigherOrder.FetchData('Form.Form) model={{...}} name=\\"backend-project-general\\" update={[Function: update]} create={[Function: create]} className=\\"form-secondary\\" match={{...}} location={{...}} history={{...}} staticContext={[undefined]} session={{...}} response={[undefined]} errors={[undefined]} dispatch={[Function]}>
                    <Form.Form model={{...}} name=\\"backend-project-general\\" update={[Function: update]} create={[Function: create]} className=\\"form-secondary\\" match={{...}} location={{...}} history={{...}} staticContext={[undefined]} session={{...}} response={[undefined]} errors={[undefined]} dispatch={[Function]} fetchData={[Function]} doNotWarn={false} notificationScope=\\"global\\" debug={false} groupErrors={false} flushOnUnmount={true} modelName=\\"This model\\" options={{...}}>
                      <div>
                        <Prompt when={false} message=\\"You may have unsaved changes. Do you want to leave without saving your changes?\\" />
                        <form onSubmit={[Function]} className=\\"form-secondary\\" data-id=\\"submit\\">
                          <FieldGroup label=\\"Identity\\" disabled={false} horizontal={false} wide={false} instructions={{...}}>
                            <mockConstructor name={[Function: name]}>
                              <div className=\\"form-section\\" role=\\"group\\" aria-labelledby=\\"1-header\\" aria-describedby=\\"1-instructions\\">
                                <header className=\\"form-section-label\\">
                                  <h2 id=\\"1-header\\">
                                    Identity
                                  </h2>
                                </header>
                                <Instructions id=\\"1-instructions\\" instructions={{...}} />
                                <div className=\\"form-input-group\\">
                                  <Form.TextInput focusOnMount={true} placeholder=\\"International Standard Book Number\\" instructions={[undefined]} label=\\"isbn\\" name=\\"attributes[metadata][isbn]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={true} placeholder=\\"International Standard Book Number\\" instructions={[undefined]} label=\\"isbn\\" name=\\"attributes[metadata][isbn]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={true} placeholder=\\"International Standard Book Number\\" instructions={[undefined]} label=\\"isbn\\" name=\\"attributes[metadata][isbn]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={true} placeholder=\\"International Standard Book Number\\" instructions={[undefined]} label=\\"isbn\\" name=\\"attributes[metadata][isbn]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][isbn]\\" errors={{...}} label=\\"isbn\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  isbn
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"International Standard Book Number\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"International Standard Serial Number\\" instructions={[undefined]} label=\\"issn\\" name=\\"attributes[metadata][issn]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"International Standard Serial Number\\" instructions={[undefined]} label=\\"issn\\" name=\\"attributes[metadata][issn]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"International Standard Serial Number\\" instructions={[undefined]} label=\\"issn\\" name=\\"attributes[metadata][issn]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"International Standard Serial Number\\" instructions={[undefined]} label=\\"issn\\" name=\\"attributes[metadata][issn]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][issn]\\" errors={{...}} label=\\"issn\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  issn
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"International Standard Serial Number\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                </div>
                              </div>
                            </mockConstructor>
                          </FieldGroup>
                          <FieldGroup label=\\"Publisher\\" disabled={false} horizontal={false} wide={false} instructions={{...}}>
                            <mockConstructor name={[Function: name]}>
                              <div className=\\"form-section\\" role=\\"group\\" aria-labelledby=\\"1-header\\" aria-describedby=\\"1-instructions\\">
                                <header className=\\"form-section-label\\">
                                  <h2 id=\\"1-header\\">
                                    Publisher
                                  </h2>
                                </header>
                                <Instructions id=\\"1-instructions\\" instructions={{...}} />
                                <div className=\\"form-input-group\\">
                                  <Form.TextInput focusOnMount={false} placeholder=\\"The Publisher\\" instructions={[undefined]} label=\\"publisher\\" name=\\"attributes[metadata][publisher]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"The Publisher\\" instructions={[undefined]} label=\\"publisher\\" name=\\"attributes[metadata][publisher]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"The Publisher\\" instructions={[undefined]} label=\\"publisher\\" name=\\"attributes[metadata][publisher]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"The Publisher\\" instructions={[undefined]} label=\\"publisher\\" name=\\"attributes[metadata][publisher]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][publisher]\\" errors={{...}} label=\\"publisher\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  publisher
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"The Publisher\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"Geographic location of the publisher\\" instructions=\\"e.g \\"Minneapolis, MN\\"\\" label=\\"publisher place\\" name=\\"attributes[metadata][publisherPlace]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"Geographic location of the publisher\\" instructions=\\"e.g \\"Minneapolis, MN\\"\\" label=\\"publisher place\\" name=\\"attributes[metadata][publisherPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Geographic location of the publisher\\" instructions=\\"e.g \\"Minneapolis, MN\\"\\" label=\\"publisher place\\" name=\\"attributes[metadata][publisherPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Geographic location of the publisher\\" instructions=\\"e.g \\"Minneapolis, MN\\"\\" label=\\"publisher place\\" name=\\"attributes[metadata][publisherPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][publisherPlace]\\" errors={{...}} label=\\"publisher place\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"has-instructions\\">
                                                  publisher place
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"Geographic location of the publisher\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions=\\"e.g \\"Minneapolis, MN\\"\\" id=\\"text-input-instructions-1\\">
                                                  <span className=\\"instructions\\" id=\\"text-input-instructions-1\\">
                                                    e.g &quot;Minneapolis, MN&quot;
                                                  </span>
                                                </Instructions>
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"Original publisher, for items that have been republished by a different publisher\\" instructions={[undefined]} label=\\"original publisher\\" name=\\"attributes[metadata][originalPublisher]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"Original publisher, for items that have been republished by a different publisher\\" instructions={[undefined]} label=\\"original publisher\\" name=\\"attributes[metadata][originalPublisher]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Original publisher, for items that have been republished by a different publisher\\" instructions={[undefined]} label=\\"original publisher\\" name=\\"attributes[metadata][originalPublisher]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Original publisher, for items that have been republished by a different publisher\\" instructions={[undefined]} label=\\"original publisher\\" name=\\"attributes[metadata][originalPublisher]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][originalPublisher]\\" errors={{...}} label=\\"original publisher\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  original publisher
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"Original publisher, for items that have been republished by a different publisher\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"Geographic location of the original publisher\\" instructions={[undefined]} label=\\"original publisher place\\" name=\\"attributes[metadata][originalPublisherPlace]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"Geographic location of the original publisher\\" instructions={[undefined]} label=\\"original publisher place\\" name=\\"attributes[metadata][originalPublisherPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Geographic location of the original publisher\\" instructions={[undefined]} label=\\"original publisher place\\" name=\\"attributes[metadata][originalPublisherPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Geographic location of the original publisher\\" instructions={[undefined]} label=\\"original publisher place\\" name=\\"attributes[metadata][originalPublisherPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][originalPublisherPlace]\\" errors={{...}} label=\\"original publisher place\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  original publisher place
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"Geographic location of the original publisher\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                </div>
                              </div>
                            </mockConstructor>
                          </FieldGroup>
                          <FieldGroup label=\\"Bibliographic\\" disabled={false} horizontal={false} wide={false} instructions={{...}}>
                            <mockConstructor name={[Function: name]}>
                              <div className=\\"form-section\\" role=\\"group\\" aria-labelledby=\\"1-header\\" aria-describedby=\\"1-instructions\\">
                                <header className=\\"form-section-label\\">
                                  <h2 id=\\"1-header\\">
                                    Bibliographic
                                  </h2>
                                </header>
                                <Instructions id=\\"1-instructions\\" instructions={{...}} />
                                <div className=\\"form-input-group\\">
                                  <Form.TextInput focusOnMount={false} placeholder=\\"Title of the container holding the item\\" instructions=\\"e.g. the book title for a book chapter, the journal title for a journal article\\" label=\\"container title\\" name=\\"attributes[metadata][containerTitle]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"Title of the container holding the item\\" instructions=\\"e.g. the book title for a book chapter, the journal title for a journal article\\" label=\\"container title\\" name=\\"attributes[metadata][containerTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Title of the container holding the item\\" instructions=\\"e.g. the book title for a book chapter, the journal title for a journal article\\" label=\\"container title\\" name=\\"attributes[metadata][containerTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Title of the container holding the item\\" instructions=\\"e.g. the book title for a book chapter, the journal title for a journal article\\" label=\\"container title\\" name=\\"attributes[metadata][containerTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][containerTitle]\\" errors={{...}} label=\\"container title\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"has-instructions\\">
                                                  container title
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"Title of the container holding the item\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions=\\"e.g. the book title for a book chapter, the journal title for a journal article\\" id=\\"text-input-instructions-1\\">
                                                  <span className=\\"instructions\\" id=\\"text-input-instructions-1\\">
                                                    e.g. the book title for a book chapter, the journal title for a journal article
                                                  </span>
                                                </Instructions>
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"Version of the item\\" instructions={[undefined]} label=\\"version\\" name=\\"attributes[metadata][version]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"Version of the item\\" instructions={[undefined]} label=\\"version\\" name=\\"attributes[metadata][version]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Version of the item\\" instructions={[undefined]} label=\\"version\\" name=\\"attributes[metadata][version]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Version of the item\\" instructions={[undefined]} label=\\"version\\" name=\\"attributes[metadata][version]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][version]\\" errors={{...}} label=\\"version\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  version
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"Version of the item\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"(Container) edition holding the item\\" instructions=\\"e.g. \\"3\\" when citing a chapter in the third edition of a book\\" label=\\"edition\\" name=\\"attributes[metadata][edition]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"(Container) edition holding the item\\" instructions=\\"e.g. \\"3\\" when citing a chapter in the third edition of a book\\" label=\\"edition\\" name=\\"attributes[metadata][edition]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"(Container) edition holding the item\\" instructions=\\"e.g. \\"3\\" when citing a chapter in the third edition of a book\\" label=\\"edition\\" name=\\"attributes[metadata][edition]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"(Container) edition holding the item\\" instructions=\\"e.g. \\"3\\" when citing a chapter in the third edition of a book\\" label=\\"edition\\" name=\\"attributes[metadata][edition]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][edition]\\" errors={{...}} label=\\"edition\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"has-instructions\\">
                                                  edition
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"(Container) edition holding the item\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions=\\"e.g. \\"3\\" when citing a chapter in the third edition of a book\\" id=\\"text-input-instructions-1\\">
                                                  <span className=\\"instructions\\" id=\\"text-input-instructions-1\\">
                                                    e.g. &quot;3&quot; when citing a chapter in the third edition of a book
                                                  </span>
                                                </Instructions>
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"(Container) issue holding the item\\" instructions=\\"e.g. \\"5\\" when citing a journal article from journal volume 2, issue 5\\" label=\\"issue\\" name=\\"attributes[metadata][issue]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"(Container) issue holding the item\\" instructions=\\"e.g. \\"5\\" when citing a journal article from journal volume 2, issue 5\\" label=\\"issue\\" name=\\"attributes[metadata][issue]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"(Container) issue holding the item\\" instructions=\\"e.g. \\"5\\" when citing a journal article from journal volume 2, issue 5\\" label=\\"issue\\" name=\\"attributes[metadata][issue]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"(Container) issue holding the item\\" instructions=\\"e.g. \\"5\\" when citing a journal article from journal volume 2, issue 5\\" label=\\"issue\\" name=\\"attributes[metadata][issue]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][issue]\\" errors={{...}} label=\\"issue\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"has-instructions\\">
                                                  issue
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"(Container) issue holding the item\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions=\\"e.g. \\"5\\" when citing a journal article from journal volume 2, issue 5\\" id=\\"text-input-instructions-1\\">
                                                  <span className=\\"instructions\\" id=\\"text-input-instructions-1\\">
                                                    e.g. &quot;5&quot; when citing a journal article from journal volume 2, issue 5
                                                  </span>
                                                </Instructions>
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"(Container) volume holding the item \\" instructions=\\"e.g. “2” when citing a chapter from book volume 2\\" label=\\"volume\\" name=\\"attributes[metadata][volume]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"(Container) volume holding the item \\" instructions=\\"e.g. “2” when citing a chapter from book volume 2\\" label=\\"volume\\" name=\\"attributes[metadata][volume]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"(Container) volume holding the item \\" instructions=\\"e.g. “2” when citing a chapter from book volume 2\\" label=\\"volume\\" name=\\"attributes[metadata][volume]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"(Container) volume holding the item \\" instructions=\\"e.g. “2” when citing a chapter from book volume 2\\" label=\\"volume\\" name=\\"attributes[metadata][volume]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][volume]\\" errors={{...}} label=\\"volume\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"has-instructions\\">
                                                  volume
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"(Container) volume holding the item \\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions=\\"e.g. “2” when citing a chapter from book volume 2\\" id=\\"text-input-instructions-1\\">
                                                  <span className=\\"instructions\\" id=\\"text-input-instructions-1\\">
                                                    e.g. “2” when citing a chapter from book volume 2
                                                  </span>
                                                </Instructions>
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder=\\"Title of the original version\\" instructions={[undefined]} label=\\"original title\\" name=\\"attributes[metadata][originalTitle]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder=\\"Title of the original version\\" instructions={[undefined]} label=\\"original title\\" name=\\"attributes[metadata][originalTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Title of the original version\\" instructions={[undefined]} label=\\"original title\\" name=\\"attributes[metadata][originalTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder=\\"Title of the original version\\" instructions={[undefined]} label=\\"original title\\" name=\\"attributes[metadata][originalTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][originalTitle]\\" errors={{...}} label=\\"original title\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  original title
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder=\\"Title of the original version\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                </div>
                              </div>
                            </mockConstructor>
                          </FieldGroup>
                          <FieldGroup label=\\"Other\\" disabled={false} horizontal={false} wide={false} instructions={{...}}>
                            <mockConstructor name={[Function: name]}>
                              <div className=\\"form-section\\" role=\\"group\\" aria-labelledby=\\"1-header\\" aria-describedby=\\"1-instructions\\">
                                <header className=\\"form-section-label\\">
                                  <h2 id=\\"1-header\\">
                                    Other
                                  </h2>
                                </header>
                                <Instructions id=\\"1-instructions\\" instructions={{...}} />
                                <div className=\\"form-input-group\\">
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"abstract\\" name=\\"attributes[metadata][abstract]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"abstract\\" name=\\"attributes[metadata][abstract]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"abstract\\" name=\\"attributes[metadata][abstract]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"abstract\\" name=\\"attributes[metadata][abstract]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][abstract]\\" errors={{...}} label=\\"abstract\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  abstract
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive\\" name=\\"attributes[metadata][archive]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive\\" name=\\"attributes[metadata][archive]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive\\" name=\\"attributes[metadata][archive]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive\\" name=\\"attributes[metadata][archive]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][archive]\\" errors={{...}} label=\\"archive\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  archive
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive location\\" name=\\"attributes[metadata][archiveLocation]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive location\\" name=\\"attributes[metadata][archiveLocation]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive location\\" name=\\"attributes[metadata][archiveLocation]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive location\\" name=\\"attributes[metadata][archiveLocation]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][archiveLocation]\\" errors={{...}} label=\\"archive location\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  archive location
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive place\\" name=\\"attributes[metadata][archivePlace]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive place\\" name=\\"attributes[metadata][archivePlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive place\\" name=\\"attributes[metadata][archivePlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"archive place\\" name=\\"attributes[metadata][archivePlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][archivePlace]\\" errors={{...}} label=\\"archive place\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  archive place
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"authority\\" name=\\"attributes[metadata][authority]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"authority\\" name=\\"attributes[metadata][authority]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"authority\\" name=\\"attributes[metadata][authority]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"authority\\" name=\\"attributes[metadata][authority]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][authority]\\" errors={{...}} label=\\"authority\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  authority
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"call number\\" name=\\"attributes[metadata][callNumber]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"call number\\" name=\\"attributes[metadata][callNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"call number\\" name=\\"attributes[metadata][callNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"call number\\" name=\\"attributes[metadata][callNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][callNumber]\\" errors={{...}} label=\\"call number\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  call number
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"chapter number\\" name=\\"attributes[metadata][chapterNumber]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"chapter number\\" name=\\"attributes[metadata][chapterNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"chapter number\\" name=\\"attributes[metadata][chapterNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"chapter number\\" name=\\"attributes[metadata][chapterNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][chapterNumber]\\" errors={{...}} label=\\"chapter number\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  chapter number
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection number\\" name=\\"attributes[metadata][collectionNumber]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection number\\" name=\\"attributes[metadata][collectionNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection number\\" name=\\"attributes[metadata][collectionNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection number\\" name=\\"attributes[metadata][collectionNumber]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][collectionNumber]\\" errors={{...}} label=\\"collection number\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  collection number
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection title\\" name=\\"attributes[metadata][collectionTitle]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection title\\" name=\\"attributes[metadata][collectionTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection title\\" name=\\"attributes[metadata][collectionTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"collection title\\" name=\\"attributes[metadata][collectionTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][collectionTitle]\\" errors={{...}} label=\\"collection title\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  collection title
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"dimensions\\" name=\\"attributes[metadata][dimensions]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"dimensions\\" name=\\"attributes[metadata][dimensions]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"dimensions\\" name=\\"attributes[metadata][dimensions]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"dimensions\\" name=\\"attributes[metadata][dimensions]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][dimensions]\\" errors={{...}} label=\\"dimensions\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  dimensions
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event\\" name=\\"attributes[metadata][event]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event\\" name=\\"attributes[metadata][event]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event\\" name=\\"attributes[metadata][event]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event\\" name=\\"attributes[metadata][event]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][event]\\" errors={{...}} label=\\"event\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  event
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event place\\" name=\\"attributes[metadata][eventPlace]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event place\\" name=\\"attributes[metadata][eventPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event place\\" name=\\"attributes[metadata][eventPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"event place\\" name=\\"attributes[metadata][eventPlace]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][eventPlace]\\" errors={{...}} label=\\"event place\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  event place
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"jurisdiction\\" name=\\"attributes[metadata][jurisdiction]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"jurisdiction\\" name=\\"attributes[metadata][jurisdiction]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"jurisdiction\\" name=\\"attributes[metadata][jurisdiction]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"jurisdiction\\" name=\\"attributes[metadata][jurisdiction]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][jurisdiction]\\" errors={{...}} label=\\"jurisdiction\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  jurisdiction
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"medium\\" name=\\"attributes[metadata][medium]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"medium\\" name=\\"attributes[metadata][medium]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"medium\\" name=\\"attributes[metadata][medium]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"medium\\" name=\\"attributes[metadata][medium]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][medium]\\" errors={{...}} label=\\"medium\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  medium
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number\\" name=\\"attributes[metadata][number]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number\\" name=\\"attributes[metadata][number]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number\\" name=\\"attributes[metadata][number]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number\\" name=\\"attributes[metadata][number]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][number]\\" errors={{...}} label=\\"number\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  number
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of pages\\" name=\\"attributes[metadata][numberOfPages]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of pages\\" name=\\"attributes[metadata][numberOfPages]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of pages\\" name=\\"attributes[metadata][numberOfPages]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of pages\\" name=\\"attributes[metadata][numberOfPages]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][numberOfPages]\\" errors={{...}} label=\\"number of pages\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  number of pages
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of volumes\\" name=\\"attributes[metadata][numberOfVolumes]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of volumes\\" name=\\"attributes[metadata][numberOfVolumes]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of volumes\\" name=\\"attributes[metadata][numberOfVolumes]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"number of volumes\\" name=\\"attributes[metadata][numberOfVolumes]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][numberOfVolumes]\\" errors={{...}} label=\\"number of volumes\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  number of volumes
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmcid\\" name=\\"attributes[metadata][pmcid]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmcid\\" name=\\"attributes[metadata][pmcid]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmcid\\" name=\\"attributes[metadata][pmcid]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmcid\\" name=\\"attributes[metadata][pmcid]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][pmcid]\\" errors={{...}} label=\\"pmcid\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  pmcid
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmid\\" name=\\"attributes[metadata][pmid]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmid\\" name=\\"attributes[metadata][pmid]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmid\\" name=\\"attributes[metadata][pmid]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"pmid\\" name=\\"attributes[metadata][pmid]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][pmid]\\" errors={{...}} label=\\"pmid\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  pmid
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"reviewed title\\" name=\\"attributes[metadata][reviewedTitle]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"reviewed title\\" name=\\"attributes[metadata][reviewedTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"reviewed title\\" name=\\"attributes[metadata][reviewedTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"reviewed title\\" name=\\"attributes[metadata][reviewedTitle]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][reviewedTitle]\\" errors={{...}} label=\\"reviewed title\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  reviewed title
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"section\\" name=\\"attributes[metadata][section]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"section\\" name=\\"attributes[metadata][section]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"section\\" name=\\"attributes[metadata][section]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"section\\" name=\\"attributes[metadata][section]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][section]\\" errors={{...}} label=\\"section\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  section
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                  <Form.TextInput focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"year suffix\\" name=\\"attributes[metadata][yearSuffix]\\" password={false} join={[Function: join]} disabled={false}>
                                    <mockConstructor>
                                      <HigherOrder.FetchData('Form.BaseInput) focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"year suffix\\" name=\\"attributes[metadata][yearSuffix]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                        <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"year suffix\\" name=\\"attributes[metadata][yearSuffix]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]}>
                                          <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-project-general\\" submitKey={{...}} errors={{...}} focusOnMount={false} placeholder={{...}} instructions={{...}} label=\\"year suffix\\" name=\\"attributes[metadata][yearSuffix]\\" password={false} join={[Function: join]} disabled={false} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                            <Errorable className=\\"form-input\\" name=\\"attributes[metadata][yearSuffix]\\" errors={{...}} label=\\"year suffix\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                              <div style={{...}} className=\\"form-input\\">
                                                <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                  year suffix
                                                </label>
                                                <input id=\\"text-input-1\\" type=\\"text\\" placeholder={{...}} onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                                <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                              </div>
                                            </Errorable>
                                          </Form.BaseInput>
                                        </Form.Setter('Form.BaseInput)>
                                      </HigherOrder.FetchData('Form.BaseInput)>
                                    </mockConstructor>
                                  </Form.TextInput>
                                </div>
                              </div>
                            </mockConstructor>
                          </FieldGroup>
                          <Form.Save text=\\"Save Metadata\\">
                            <div className=\\"form-input submit wide\\">
                              <input className=\\"button-secondary button-secondary--outlined\\" type=\\"submit\\" value=\\"Save Metadata\\" />
                            </div>
                          </Form.Save>
                        </form>
                      </div>
                    </Form.Form>
                  </HigherOrder.FetchData('Form.Form)>
                </Connect(HigherOrder.FetchData('Form.Form))>
              </Route>
            </withRouter(Connect(HigherOrder.FetchData('Form.Form)))>
          </section>
        </Metadata.Form>
      </Text.Metadata>
    </Provider>
  </Router>
</MemoryRouter>"
`;
