// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Backend Stylesheet Edit Container renders correctly 1`] = `
"<MemoryRouter>
  <Router history={{...}}>
    <Provider store={{...}}>
      <withRouter(Connect(HigherOrder.FetchData('Stylesheet.Edit))) stylesheet={{...}}>
        <Connect(HigherOrder.FetchData('Stylesheet.Edit)) stylesheet={{...}} history={{...}} location={{...}} match={{...}} staticContext={[undefined]}>
          <HigherOrder.FetchData('Stylesheet.Edit) stylesheet={{...}} history={{...}} location={{...}} match={{...}} staticContext={[undefined]} dispatch={[Function]}>
            <Stylesheet.Edit stylesheet={{...}} history={{...}} location={{...}} match={{...}} staticContext={[undefined]} dispatch={[Function]} fetchData={[Function]}>
              <div>
                <section>
                  <section className=\\"form-section form-section--primary\\">
                    <withRouter(Connect(HigherOrder.FetchData('Form.Form))) model={[undefined]} name=\\"backend-stylesheet-create\\" update={[Function: update]} create={[Function]} onSuccess={[Function]} className=\\"form-secondary\\">
                      <Connect(HigherOrder.FetchData('Form.Form)) model={[undefined]} name=\\"backend-stylesheet-create\\" update={[Function: update]} create={[Function]} onSuccess={[Function]} className=\\"form-secondary\\" history={{...}} location={{...}} match={{...}} staticContext={[undefined]}>
                        <HigherOrder.FetchData('Form.Form) model={[undefined]} name=\\"backend-stylesheet-create\\" update={[Function: update]} create={[Function]} onSuccess={[Function]} className=\\"form-secondary\\" history={{...}} location={{...}} match={{...}} staticContext={[undefined]} session={{...}} response={[undefined]} errors={[undefined]} dispatch={[Function]}>
                          <Form.Form model={{...}} name=\\"backend-stylesheet-create\\" update={[Function: update]} create={[Function]} onSuccess={[Function]} className=\\"form-secondary\\" history={{...}} location={{...}} match={{...}} staticContext={[undefined]} session={{...}} response={[undefined]} errors={[undefined]} dispatch={[Function]} fetchData={[Function]} doNotWarn={false} notificationScope=\\"global\\" debug={false} groupErrors={false} flushOnUnmount={true} modelName=\\"This model\\" options={{...}}>
                            <div>
                              <Prompt when={false} message=\\"You may have unsaved changes. Do you want to leave without saving your changes?\\" />
                              <form onSubmit={[Function]} className=\\"form-secondary\\" data-id=\\"submit\\">
                                <div className=\\"form-input\\">
                                  <p className=\\"instructions\\" />
                                </div>
                                <Form.TextInput label=\\"Name\\" name=\\"attributes[name]\\" placeholder=\\"Name\\" focusOnMount={false} password={false} join={[Function: join]}>
                                  <mockConstructor>
                                    <HigherOrder.FetchData('Form.BaseInput) label=\\"Name\\" name=\\"attributes[name]\\" placeholder=\\"Name\\" focusOnMount={false} password={false} join={[Function: join]} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} buttons={[undefined]}>
                                      <Form.Setter('Form.BaseInput) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-stylesheet-create\\" submitKey={{...}} errors={{...}} label=\\"Name\\" name=\\"attributes[name]\\" placeholder=\\"Name\\" focusOnMount={false} password={false} join={[Function: join]} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} buttons={[undefined]}>
                                        <Form.BaseInput getModelValue={[Function: getModelValue]} sessionKey=\\"backend-stylesheet-create\\" submitKey={{...}} errors={{...}} label=\\"Name\\" name=\\"attributes[name]\\" placeholder=\\"Name\\" focusOnMount={false} password={false} join={[Function: join]} id=\\"text-input-1\\" idForError=\\"text-input-error-1\\" idForInstructions=\\"text-input-instructions-1\\" inputType=\\"text\\" renderValue={[Function]} buttons={[undefined]} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                          <Errorable className=\\"form-input\\" name=\\"attributes[name]\\" errors={{...}} label=\\"Name\\" idForError=\\"text-input-error-1\\" containerStyle={{...}}>
                                            <div style={{...}} className=\\"form-input\\">
                                              <label htmlFor=\\"text-input-1\\" className=\\"\\">
                                                Name
                                              </label>
                                              <input id=\\"text-input-1\\" disabled={[undefined]} type=\\"text\\" placeholder=\\"Name\\" onChange={[Function]} value=\\"\\" aria-describedby=\\"text-input-error-1 text-input-instructions-1\\" />
                                              <Instructions instructions={{...}} id=\\"text-input-instructions-1\\" />
                                            </div>
                                          </Errorable>
                                        </Form.BaseInput>
                                      </Form.Setter('Form.BaseInput)>
                                    </HigherOrder.FetchData('Form.BaseInput)>
                                  </mockConstructor>
                                </Form.TextInput>
                                <HigherOrder.FetchData('FormCodeArea) label=\\"Source Styles\\" height=\\"300px\\" mode=\\"css\\" name=\\"attributes[rawStyles]\\" instructions=\\"These are the raw source styles, which can be edited.\\">
                                  <Form.Setter('FormCodeArea) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-stylesheet-create\\" submitKey={{...}} errors={{...}} label=\\"Source Styles\\" height=\\"300px\\" mode=\\"css\\" name=\\"attributes[rawStyles]\\" instructions=\\"These are the raw source styles, which can be edited.\\">
                                    <FormCodeArea getModelValue={[Function: getModelValue]} sessionKey=\\"backend-stylesheet-create\\" submitKey={{...}} errors={{...}} label=\\"Source Styles\\" height=\\"300px\\" mode=\\"css\\" name=\\"attributes[rawStyles]\\" instructions=\\"These are the raw source styles, which can be edited.\\" onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                      <div>
                                        This is the CodeArea mock
                                      </div>
                                    </FormCodeArea>
                                  </Form.Setter('FormCodeArea)>
                                </HigherOrder.FetchData('FormCodeArea)>
                                <HigherOrder.FetchData('FormCodeArea) label=\\"Validated Styles\\" name=\\"attributes[styles]\\" mode=\\"css\\" instructions=\\"The following input is read-only. It contains the validated styles that are included in the reader for this text.\\" readOnly={true}>
                                  <Form.Setter('FormCodeArea) actions={{...}} dirtyModel={{...}} sourceModel={{...}} getModelValue={[Function: getModelValue]} sessionKey=\\"backend-stylesheet-create\\" submitKey={{...}} errors={{...}} label=\\"Validated Styles\\" name=\\"attributes[styles]\\" mode=\\"css\\" instructions=\\"The following input is read-only. It contains the validated styles that are included in the reader for this text.\\" readOnly={true}>
                                    <FormCodeArea getModelValue={[Function: getModelValue]} sessionKey=\\"backend-stylesheet-create\\" submitKey={{...}} errors={{...}} label=\\"Validated Styles\\" name=\\"attributes[styles]\\" mode=\\"css\\" instructions=\\"The following input is read-only. It contains the validated styles that are included in the reader for this text.\\" readOnly={true} onChange={[Function]} set={[Function]} setOther={[Function]} value={[undefined]} initialValue={[undefined]}>
                                      <div>
                                        This is the CodeArea mock
                                      </div>
                                    </FormCodeArea>
                                  </Form.Setter('FormCodeArea)>
                                </HigherOrder.FetchData('FormCodeArea)>
                                <Connect(Stylesheet.Form.TextSections) stylesheet={{...}} wide={true} history={{...}} location={{...}} match={{...}} staticContext={[undefined]} dispatch={[Function]} fetchData={[Function]}>
                                  <Stylesheet.Form.TextSections stylesheet={{...}} wide={true} history={{...}} location={{...}} match={{...}} staticContext={[undefined]} dispatch={[Function]} fetchData={[Function]} updateStylesheets={[undefined]} authentication={{...}} />
                                </Connect(Stylesheet.Form.TextSections)>
                                <Form.Save cancelRoute=\\"/backend/projects/text/undefined/styles\\" text=\\"Save Stylesheet\\">
                                  <div className=\\"form-input submit wide\\">
                                    <Link to=\\"/backend/projects/text/undefined/styles\\" className=\\"button-secondary button-secondary--outlined button-secondary--dull\\">
                                      <a className=\\"button-secondary button-secondary--outlined button-secondary--dull\\" onClick={[Function: onClick]} href=\\"/backend/projects/text/undefined/styles\\">
                                        Cancel
                                      </a>
                                    </Link>
                                    <input className=\\"button-secondary button-secondary--outlined\\" type=\\"submit\\" value=\\"Save Stylesheet\\" />
                                  </div>
                                </Form.Save>
                              </form>
                            </div>
                          </Form.Form>
                        </HigherOrder.FetchData('Form.Form)>
                      </Connect(HigherOrder.FetchData('Form.Form))>
                    </withRouter(Connect(HigherOrder.FetchData('Form.Form)))>
                  </section>
                </section>
              </div>
            </Stylesheet.Edit>
          </HigherOrder.FetchData('Stylesheet.Edit)>
        </Connect(HigherOrder.FetchData('Stylesheet.Edit))>
      </withRouter(Connect(HigherOrder.FetchData('Stylesheet.Edit)))>
    </Provider>
  </Router>
</MemoryRouter>"
`;
