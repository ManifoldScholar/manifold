// Component Structure
// -------------------

// Structure-only mixins/utility classes, with parameters for margins, padding, position, display, etc.

// Contents
// --------------------------
// - Prototypes
// - Utilities
// - Layout
// - Type
// - Images
// - Lists
// - Buttons/Links
// - Tables
// - Forms
// - Imports

// Utilities
// --------------------------------------------------------
// Media queries
// Respond to viewport size
// $size -> viewport size
// $operator -> 'min' or 'max'
// $aspect -> 'width' or 'height'
// --------------------------
@mixin respond($size, $operator: max, $aspect: width) {
  @media all and (#{$operator}-#{$aspect}: $size) {
    @content;
  }
}

.rel {
  position: relative;
}

// Clearfix
// $mode accepts 'light' or 'heavy'
// 'light' is sufficient for clearing floats, while 'heavy' is required to
// prevent margin collapsing
// --------------------------
@mixin clearfix($mode: light) {
  @if $mode == heavy {
    &::before,
    &::after {
      display: table;
      content: '';
    }

    &::after {
      clear: both;
    }
  } @else {
    &::after {
      display: block;
      clear: both;
      content: '';
    }
  }
}


// Layout
// --------------------------------------------------------
@mixin containerPrototype {
  max-width: $containerWidthFull;
  margin-right: auto;
  margin-left: auto;
  padding-right: $containerPaddingFull;
  padding-left: $containerPaddingFull;
}

@mixin containerNarrow {
  // Default max width
  max-width: $containerWidthNarrow;
  margin-right: auto;
  margin-left: auto;
  padding-right: $containerPaddingMin;
  padding-left: $containerPaddingMin;
}

.container {
  @include containerPrototype;

  // Section can be abstracted to more specific section class (or body class) if necessary
  section > & {
    padding-top: 85px;
    padding-bottom: 100px;
  }
}

.container-focus {
  @include containerNarrow;
  transition: max-width $duration $timing;
}

.section-heading-utility-right {
  // TODO: These styles should only hold for wider than container maximum
  position: absolute;
  top: 6px;
  right: 0;
}


// Lists
// --------------------------------------------------------
@mixin listUnstyled {
  padding-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  list-style-type: none;
}

@mixin listHorizontal {
  @include listUnstyled;

  li {
    display: inline-block;
  }
}


// Form Layout
// --------------------------------------------------------
// TODO: This combines appearance mixins and should be a shared class or mixin
@mixin loginFormPrimary {
  .field + .field {
    margin-top: 27px;
  }

  label {
    @include inputLabelPrimary;
  }

  input[type="text"], input[type="password"] {
    @include inputPrimary;
  }

  .button-secondary {
    display: block;
    margin-top: 30px;
  }
}


// Imports
// --------------------------------------------------------
@import 'grids';
