// Component Structure
// -------------------

// Structure-only mixins/utility classes, with parameters for margins, padding, position, display, etc.

// Contents
// --------------------------
// - Prototypes
// - Utilities
// - Layout
// - Type
// - Images
// - Lists
// - Buttons/Links
// - Tables
// - Forms
// - Imports

// Utilities
// --------------------------------------------------------
// Media queries
// Respond to viewport size
// $size -> viewport size
// $operator -> 'min' or 'max'
// $aspect -> 'width' or 'height'
// --------------------------
@mixin respond($size, $operator: min, $aspect: width) {
  @media all and (#{$operator}-#{$aspect}: $size) {
    @content;
  }
}

// Media show/hide classes, media-query variable dependent
// --------------------------
@mixin hide($breakpoint) {
  @include respond($breakpoint) {
    display: none;
  }
}

@mixin show($breakpoint, $default: inherit) {
  display: none;

  @include respond($breakpoint) {
    display: $default;
  }
}

.hide-60 {
  @include hide($break60);
}

.show-60 {
  @include show($break60);
}

.rel {
  position: relative;
}

// Clearfix
// $mode accepts 'light' or 'heavy'
// 'light' is sufficient for clearing floats, while 'heavy' is required to
// prevent margin collapsing
// --------------------------
@mixin clearfix($mode: light) {
  @if $mode == heavy {
    &::before,
    &::after {
      display: table;
      content: '';
    }

    &::after {
      clear: both;
    }
  } @else {
    &::after {
      display: block;
      clear: both;
      content: '';
    }
  }
}


// Layout
// --------------------------------------------------------
@mixin containerPrototype {
  max-width: $containerWidthFull;
  padding-right: $containerPaddingResp;
  padding-left: $containerPaddingResp;
  margin-right: auto;
  margin-left: auto;

  @include respond($break100) {
    padding-right: $containerPaddingFull;
    padding-left: $containerPaddingFull;
  }
}

@mixin containerFocus {
  // Default max width
  max-width: $containerWidthFocus;
  margin-right: auto;
  margin-left: auto;
  padding-right: $containerPaddingMin;
  padding-left: $containerPaddingMin;
}

.container {
  @include containerPrototype;

  // Section can be abstracted to more specific section class (or body class) if necessary
  &:not(.flush) {
    section > & {
      padding-top: 45px;
      padding-bottom: 45px;

      @include respond($break75) {
        padding-top: 74px;
        padding-bottom: 70px;
      }
    }
  }

  &.flush-top {
    section > & {
      padding-top: 0;
      padding-bottom: 45px;

      @include respond($break75) {
        padding-top: 0;
        padding-bottom: 70px;
      }
    }
  }

  &.flush-bottom {
    section > & {
      padding-top: 45px;
      padding-bottom: 0;

      @include respond($break75) {
        padding-top: 74px;
        padding-bottom: 0;
      }
    }
  }
}

$readerContainerWidths: (790px, 680px, 500px);

.container-focus {
  @include containerFocus;
  // Currently disabled to prevent bad resource group calculations
  //transition: max-width $duration $timing;

  @for $i from 1 through length($readerContainerWidths) {
    &.container-width-#{$i - 1} {
      max-width: nth($readerContainerWidths, $i);
    }
  }
}

@mixin headerContainerPrimary {
  @include containerPrototype;
  position: relative;
  padding-top: 14px;
  padding-bottom: 14px;

  @include respond($break40) {
    padding-top: 20px;
    padding-bottom: 20px;
  }
}

@mixin headerLogoPrimary {
  display: inline-block;
  margin-right: 22px;
  color: $accentPrimary;
  text-decoration: none;
  vertical-align: middle;

  @include respond($break40) {
    margin-right: 33px;
  }

  // Icon Handling
  .manicon-manifold-logo {
    font-size: 32px;

    @include respond($break40) {
      font-size: 39px;
    }
  }

  // Image handling
  .logo-square {
    .image {
      width: 32px;
      height: 32px;
      background-position: 50% 50%;
      background-repeat: no-repeat;
      background-size: contain;

      @include respond($break40) {
        width: 39px;
        height: 39px;
      }
    }
  }
}

.align-left {
  text-align: left;
}

.align-center {
  text-align: center;
}

.align-right {
  text-align: right;
}


// Lists
// --------------------------------------------------------
@mixin listUnstyled {
  padding-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  list-style-type: none;
}

@mixin listHorizontal {
  @include listUnstyled;

  li {
    display: inline-block;
  }
}


// Form Layout
// --------------------------------------------------------
// TODO: This combines appearance mixins and should be a shared class or mixin
@mixin loginFormPrimary {
  .field + .field {
    margin-top: 27px;
  }

  label {
    @include inputLabelPrimary;
  }

  input[type="text"], input[type="password"] {
    @include inputPrimary;
  }

  .button-secondary {
    display: block;
    margin-top: 30px;
  }
}


// Imports
// --------------------------------------------------------
@import 'grids';
