// Component Structure
// -------------------
// Structure-only utility classes with parameters for margins, padding, position, display, etc.

@import 'mixins';

// Utilities
// --------------------------------------------------------
.show-50 {
  @include show($break50);
}

.hide-60 {
  @include hide($break60);
}

.show-60 {
  @include show($break60);
}

.hide-75 {
  @include hide($break75);
}

.show-75 {
  @include show($break75, block);
}

.rel {
  position: relative;
}

// Prevent scroll on an element (mainly body)
// --------------------------
.no-scroll {
  // NB: This will need to be applied on mobile
  //position: fixed;
  overflow: hidden;
}

// Layout
// --------------------------------------------------------
.container {
  @include containerPrototype;

  // Section can be abstracted to more specific section class (or body class) if necessary
  &:not(.flush) {
    section > & {
      padding-top: 39px;
      padding-bottom: 45px;

      @include respond($break60) {
        padding-top: 45px;
        padding-bottom: 45px;
      }

      @include respond($break75) {
        padding-top: 60px;
        padding-bottom: 70px;
      }
    }
  }

  &.flush-top {
    section > & {
      padding-top: 0;
      padding-bottom: 45px;

      @include respond($break75) {
        padding-top: 0;
        padding-bottom: 70px;
      }
    }

    &.flush-bottom {
      section > & {
        padding-top: 0;
        padding-bottom: 0;

        @include respond($break75) {
          padding-top: 0;
          padding-bottom: 0;
        }
      }
    }
  }

  &.flush-bottom {
    section > & {
      padding-top: 45px;
      padding-bottom: 0;

      @include respond($break75) {
        padding-top: 60px;
        padding-bottom: 0;
      }
    }
  }

  &.extra-top {
    section > & {

      @include respond($break90) {
        padding-top: 125px;
      }
    }
  }
}

$readerContainerWidths: (1063px, 916px, 790px, 680px, 500px);

.container-focus {
  @include containerFocus;
  // Currently disabled to prevent bad resource group calculations
  //transition: max-width $duration $timing;

  @for $i from 1 through length($readerContainerWidths) {
    &.container-width-#{$i - 1} {
      max-width: nth($readerContainerWidths, $i);
    }
  }
}

.align-left {
  text-align: left;
}

.align-center {
  text-align: center;
}

.align-right {
  text-align: right;
}

.float-right {
  float: right;
}

@import 'grids';
