// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Reader.Header Component matches the snapshot 1`] = `
<BlurOnLocationChange
  tag="div"
>
  <header
    className="reader-header"
  >
    <SkipLink
      skipId="skip-to-main"
      skipLinkText="Skip to main content"
      skipMessage="Skipped to Main Content"
    />
    <Connect(withPluginReplacement('Reader.Layout.PreHeader)) />
    <nav
      className="reader-header__inner"
    >
      <div
        className="reader-header__menu-group reader-header__menu-group--left"
      >
        <ReturnMenuButton
          expanded={false}
          toggleReaderMenu={[Function]}
        />
        <button
          aria-expanded={false}
          aria-haspopup={true}
          className="reader-header__button reader-header__button--gray reader-header__button--pad-default"
          onClick={[Function]}
        >
          <span
            className="reader-header__button-text"
          >
            Contents
          </span>
          <IconComposer
            fill="currentColor"
            icon="disclosureDown24"
            iconClass="reader-header__button-icon reader-header__button-icon--large"
            size="default"
            svgProps={
              Object {
                "aria-hidden": true,
              }
            }
          />
          <IconComposer
            fill="currentColor"
            icon="disclosureDown16"
            iconClass="reader-header__button-icon reader-header__button-icon--small"
            size={20}
            svgProps={
              Object {
                "aria-hidden": true,
              }
            }
          />
        </button>
      </div>
      <div
        className="reader-header__menu-group reader-header__menu-group--right"
      >
        <ul
          aria-label="Reader Settings and Search"
          className="reader-header__nav-list"
        >
          <Connect(withRouter(AuthorizeComponent))
            kind="any"
          >
            <li
              className="reader-header__nav-item"
            >
              <ControlMenu.Button
                active={false}
                icon="notes24"
                label="Notes"
                onClick={[Function]}
              />
            </li>
          </Connect(withRouter(AuthorizeComponent))>
          <li
            className="reader-header__nav-item"
          >
            <ControlMenu.Button
              active={false}
              icon="eyeball24"
              label="Visibility"
              onClick={[Function]}
            />
          </li>
          <li
            className="reader-header__nav-item"
          >
            <ControlMenu.Button
              active={false}
              icon="text24"
              label="Reader appearance"
              onClick={[Function]}
            />
          </li>
          <li
            className="reader-header__nav-item"
          >
            <SearchMenuButton
              active={false}
              className="reader-header__button reader-header__button--pad-narrow"
              toggleSearchMenu={[Function]}
            />
          </li>
          <li
            className="reader-header__nav-item"
          >
            <UserMenuButton
              active={false}
              className="reader-header__button reader-header__button--pad-narrow"
              context="reader"
              showLoginOverlay={[Function]}
              toggleUserMenu={[Function]}
            />
          </li>
        </ul>
      </div>
    </nav>
    <div
      className="reader-header__panels reader-header__panels--left"
    >
      <UIPanel
        bodyComponent={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(WithSettings('ReturnMenuBody))",
            "mapStateToProps": [Function],
            "type": [Function],
          }
        }
        hidePanel={[Function]}
        id="readerReturn"
        moreLink="http://manifold.umn.edu/about/"
        projectId="AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
        projectTitle="Rowan Test"
        returnUrl="/projects/slug-AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
        toggleSignInUpOverlay={[Function]}
        visibility={
          Object {
            "appearance": false,
            "layers": false,
            "notes": false,
            "readerReturn": false,
            "search": false,
            "tocDrawer": false,
            "user": false,
            "visibility": false,
          }
        }
      />
    </div>
    <div
      className="reader-header__panels reader-header__panels--right"
    >
      <UIPanel
        bodyComponent={[Function]}
        hidePanel={[Function]}
        id="notes"
        visibility={
          Object {
            "appearance": false,
            "layers": false,
            "notes": false,
            "readerReturn": false,
            "search": false,
            "tocDrawer": false,
            "user": false,
            "visibility": false,
          }
        }
        visible={false}
      />
      <UIPanel
        bodyComponent={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(HigherOrder.WithReadingGroups(Connect(HigherOrder.WithCurrentUser('ControlMenu.VisibilityMenuBody))))",
            "mapStateToProps": [Function],
            "type": [Function],
          }
        }
        filter={
          Object {
            "annotation": Object {
              "others": true,
              "yours": true,
            },
            "highlight": Object {
              "others": true,
              "yours": true,
            },
            "readingGroups": Object {
              "all": true,
            },
            "resource": Object {
              "all": true,
            },
          }
        }
        filterChangeHandler={[Function]}
        hidePanel={[Function]}
        id="visibility"
        visibility={
          Object {
            "appearance": false,
            "layers": false,
            "notes": false,
            "readerReturn": false,
            "search": false,
            "tocDrawer": false,
            "user": false,
            "visibility": false,
          }
        }
      />
      <UIPanel
        bodyComponent={[Function]}
        hidePanel={[Function]}
        id="search"
        initialState={
          Object {
            "keyword": "",
            "scope": "text",
          }
        }
        projectId="AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
        searchType="reader"
        sectionId={null}
        textId="AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
        toggleVisibility={[Function]}
        visibility={
          Object {
            "appearance": false,
            "layers": false,
            "notes": false,
            "readerReturn": false,
            "search": false,
            "tocDrawer": false,
            "user": false,
            "visibility": false,
          }
        }
      />
      <UIPanel
        appearance={
          Object {
            "colors": Object {
              "colorScheme": "light",
            },
            "readingGroups": Object {
              "currentAnnotatingReadingGroup": "public",
              "currentAnnotationOverlayReadingGroup": "me",
            },
            "typography": Object {
              "font": "serif",
              "fontSize": Object {
                "current": 3,
                "max": 6,
                "min": 0,
              },
              "margins": Object {
                "current": 1,
                "max": 4,
                "min": 0,
              },
            },
          }
        }
        bodyComponent={[Function]}
        hidePanel={[Function]}
        id="appearance"
        visibility={
          Object {
            "appearance": false,
            "layers": false,
            "notes": false,
            "readerReturn": false,
            "search": false,
            "tocDrawer": false,
            "user": false,
            "visibility": false,
          }
        }
      />
      <UIPanel
        bodyComponent={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(HigherOrder.WithCurrentUser('UserMenuBody))",
            "mapStateToProps": [Function],
            "type": [Function],
          }
        }
        context="reader"
        hidePanel={[Function]}
        hideUserMenu={[Function]}
        id="user"
        showLoginOverlay={[Function]}
        startLogout={[Function]}
        visibility={
          Object {
            "appearance": false,
            "layers": false,
            "notes": false,
            "readerReturn": false,
            "search": false,
            "tocDrawer": false,
            "user": false,
            "visibility": false,
          }
        }
      />
    </div>
    <button
      aria-hidden={true}
      className="reader-header__button reader-header__button--pad-default reader-header__options-button"
      onClick={[Function]}
      tabIndex={-1}
    >
      Options
    </button>
    <HeaderNotification />
  </header>
</BlurOnLocationChange>
`;
