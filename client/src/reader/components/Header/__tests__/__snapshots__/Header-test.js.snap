// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Reader.Header Component matches the snapshot 1`] = `
<header
  className="reader-header"
>
  <Connect(withPluginReplacement('Reader.Layout.PreHeader)) />
  <nav
    className="reader-header__inner"
  >
    <div
      className="reader-header__menu-group reader-header__menu-group--left"
    >
      <ReturnMenuButton
        expanded={false}
        toggleReaderMenu={[Function]}
      />
      <button
        aria-expanded={false}
        aria-haspopup={true}
        className="reader-header__button reader-header__button--gray reader-header__button--pad-default"
        id="toc-drawer-toggle"
        onClick={[Function]}
      >
        <span
          className="reader-header__button-text reader-header__button-text--dark"
        >
          reader.header.contents
        </span>
        <IconComposer
          className="reader-header__button-icon reader-header__button-icon--large"
          fill="currentColor"
          icon="disclosureDown24"
          size="default"
          svgProps={
            Object {
              "aria-hidden": true,
            }
          }
        />
        <IconComposer
          className="reader-header__button-icon reader-header__button-icon--small"
          fill="currentColor"
          icon="disclosureDown16"
          size={20}
          svgProps={
            Object {
              "aria-hidden": true,
            }
          }
        />
      </button>
    </div>
    <div
      className="reader-header__menu-group reader-header__menu-group--right"
    >
      <ul
        aria-label="reader.header.reader_settings_search"
        className="reader-header__nav-list"
      >
        <Connect(withRouter(AuthorizeComponent))
          kind="any"
        >
          <li
            className="reader-header__nav-item"
          >
            <ControlMenu.Button
              active={false}
              icon="notes24"
              label="glossary.note_title_case_other"
              onClick={[Function]}
            />
          </li>
        </Connect(withRouter(AuthorizeComponent))>
        <li
          className="reader-header__nav-item"
        >
          <ControlMenu.Button
            active={false}
            icon="eyeball24"
            label="common.visibility_title_case"
            onClick={[Function]}
          />
        </li>
        <li
          className="reader-header__nav-item"
        >
          <ControlMenu.Button
            active={false}
            icon="text24"
            label="reader.header.reader_appearance"
            onClick={[Function]}
          />
        </li>
        <li
          className="reader-header__nav-item"
        >
          <withI18nextTranslation(SearchMenuButton)
            active={false}
            className="reader-header__button reader-header__button--pad-narrow"
            iconSize={32}
            toggleSearchMenu={[Function]}
          />
        </li>
        <li
          className="reader-header__nav-item"
        >
          <Global.Atomic.DisclosureNavigationMenu
            callbacks={
              Object {
                "addNotification": [Function],
                "clearNotifications": [Function],
                "closeSignInUpOverlay": [Function],
                "hideAppearancePanel": [Function],
                "hideNotesPanel": [Function],
                "hideReaderReturnPanel": [Function],
                "hideSearchPanel": [Function],
                "hideUserPanel": [Function],
                "hideVisibilityPanel": [Function],
                "logout": [Function],
                "panelHide": [Function],
                "panelShow": [Function],
                "panelToggle": [Function],
                "removeNotification": [Function],
                "showMyNotes": [Function],
                "toggleSearchPanel": [Function],
                "toggleSignInUpOverlay": [Function],
                "toggleUserPanel": [Function],
                "visibilityChange": [Function],
                "visibilityHide": [Function],
                "visibilityShow": [Function],
                "visibilityToggle": [Function],
              }
            }
            context="reader"
            disclosure={<ForwardRef />}
            onBlur={[Function]}
            visible={false}
          >
            <UserMenuBody />
          </Global.Atomic.DisclosureNavigationMenu>
        </li>
      </ul>
    </div>
  </nav>
  <div
    className="reader-header__panels reader-header__panels--left"
  >
    <Global.UIPanel
      bodyComponent={[Function]}
      hidePanel={[Function]}
      id="readerReturn"
      moreLink="https://manifoldapp.org/"
      projectId="AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
      projectTitle="Rowan Test"
      returnUrl="/projects/slug-AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
      toggleSignInUpOverlay={[Function]}
      visibility={
        Object {
          "appearance": false,
          "layers": false,
          "notes": false,
          "readerReturn": false,
          "search": false,
          "tocDrawer": false,
          "user": false,
          "visibility": false,
        }
      }
    />
  </div>
  <div
    className="reader-header__panels reader-header__panels--right"
  >
    <Global.UIPanel
      bodyComponent={[Function]}
      hidePanel={[Function]}
      id="notes"
      visibility={
        Object {
          "appearance": false,
          "layers": false,
          "notes": false,
          "readerReturn": false,
          "search": false,
          "tocDrawer": false,
          "user": false,
          "visibility": false,
        }
      }
      visible={false}
    />
    <Global.UIPanel
      bodyComponent={[Function]}
      filter={
        Object {
          "annotation": Object {
            "others": true,
            "yours": true,
          },
          "highlight": Object {
            "others": true,
            "yours": true,
          },
          "readingGroups": Object {
            "all": true,
          },
          "resource": Object {
            "all": true,
          },
        }
      }
      filterChangeHandler={[Function]}
      hidePanel={[Function]}
      id="visibility"
      visibility={
        Object {
          "appearance": false,
          "layers": false,
          "notes": false,
          "readerReturn": false,
          "search": false,
          "tocDrawer": false,
          "user": false,
          "visibility": false,
        }
      }
    />
    <Global.UIPanel
      bodyComponent={[Function]}
      hidePanel={[Function]}
      id="search"
      initialState={
        Object {
          "keyword": "",
          "scope": "text",
        }
      }
      projectId="AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
      searchType="reader"
      textId="AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
      toggleVisibility={[Function]}
      visibility={
        Object {
          "appearance": false,
          "layers": false,
          "notes": false,
          "readerReturn": false,
          "search": false,
          "tocDrawer": false,
          "user": false,
          "visibility": false,
        }
      }
    />
    <Global.UIPanel
      appearance={
        Object {
          "colors": Object {
            "colorScheme": "light",
          },
          "readingGroups": Object {
            "currentAnnotatingReadingGroup": "private",
            "currentAnnotationOverlayReadingGroup": "me",
          },
          "typography": Object {
            "font": "serif",
            "fontSize": Object {
              "current": 3,
              "max": 6,
              "min": 0,
            },
            "margins": Object {
              "current": 1,
              "max": 4,
              "min": 0,
            },
          },
        }
      }
      bodyComponent={[Function]}
      hidePanel={[Function]}
      id="appearance"
      visibility={
        Object {
          "appearance": false,
          "layers": false,
          "notes": false,
          "readerReturn": false,
          "search": false,
          "tocDrawer": false,
          "user": false,
          "visibility": false,
        }
      }
    />
  </div>
  <button
    aria-hidden={true}
    className="reader-header__button reader-header__options-button"
    onClick={[Function]}
    tabIndex={-1}
  >
    <span>
      glossary.option_title_case_other
    </span>
    <IconComposer
      className="reader-header__options-button-icon reader-header__options-button-icon--options"
      fill="currentColor"
      icon="menu32"
      size="default"
      svgProps={
        Object {
          "aria-hidden": true,
        }
      }
    />
  </button>
  <HeaderNotification />
</header>
`;
