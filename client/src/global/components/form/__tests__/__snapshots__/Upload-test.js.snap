// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`global/components/form/Upload When there is no remove prop matches the snapshot 1`] = `
<HigherOrder.FetchData('Form.Upload)
  accepts="images"
  initialValue="/some/image.jpg"
  label="Cover"
  layout="portrait"
  set={[MockFunction]}
  setOther={[MockFunction]}
>
  <Form.Setter('Form.Upload)
    accepts="images"
    actions={
      Object {
        "set": [Function],
      }
    }
    dirtyModel={Object {}}
    getModelValue={[Function]}
    initialValue="/some/image.jpg"
    label="Cover"
    layout="portrait"
    sessionKey="1234"
    set={[MockFunction]}
    setOther={[MockFunction]}
    sourceModel={Object {}}
    submitKey={null}
  >
    <Form.Upload
      accepts="images"
      getModelValue={[Function]}
      initialValue="/some/image.jpg"
      label="Cover"
      layout="portrait"
      sessionKey="1234"
      set={[MockFunction]}
      setOther={[MockFunction]}
      submitKey={null}
    >
      <mockConstructor>
        <Form.Upload.Base
          accepts={
            Object {
              "accepts": "image/*",
              "extensions": "gif, jpeg, jpg, png",
            }
          }
          getModelValue={[Function]}
          idForError="upload-error-1"
          idForInstructions="upload-instructions-1"
          initialValue="/some/image.jpg"
          inputId="upload-1"
          label="Cover"
          layout="portrait"
          sessionKey="1234"
          submitKey={null}
          updateValue={[Function]}
          wide={false}
        >
          <div
            className="form-input"
          >
            <Errorable
              className="form-input"
              containerStyle={Object {}}
              idForError="upload-error-1"
              label="Cover"
            >
              <div
                className="form-input"
                style={Object {}}
              >
                <label
                  className=""
                  htmlFor="upload-1"
                >
                  Cover
                </label>
                <Component
                  onDrop={[Function]}
                >
                  <div
                    onDrop={[Function]}
                  >
                    <input />
                    <FormUploadPreview
                      fileName={null}
                      handleRemove={[Function]}
                      preview="/some/image.jpg"
                    >
                      <withI18nextTranslation(FormUploadImagePreview)
                        handleRemove={[Function]}
                        image="/some/image.jpg"
                      >
                        <FormUploadImagePreview
                          handleRemove={[Function]}
                          i18n={
                            Object {
                              "language": "en-US",
                              "languages": Array [
                                "en-US",
                                "en",
                              ],
                              "options": Object {
                                "appendNamespaceToCIMode": false,
                                "appendNamespaceToMissingKey": false,
                                "contextSeparator": "_",
                                "debug": false,
                                "defaultNS": Array [
                                  "translation",
                                ],
                                "fallbackLng": Array [
                                  "en-US",
                                ],
                                "fallbackNS": false,
                                "ignoreJSONStructure": true,
                                "initImmediate": true,
                                "interpolation": Object {
                                  "escapeValue": true,
                                  "format": [Function],
                                  "formatSeparator": ",",
                                  "maxReplaces": 1000,
                                  "nestingOptionsSeparator": ",",
                                  "nestingPrefix": "$t(",
                                  "nestingSuffix": ")",
                                  "prefix": "{{",
                                  "skipOnVariables": true,
                                  "suffix": "}}",
                                  "unescapePrefix": "-",
                                },
                                "joinArrays": false,
                                "keySeparator": ".",
                                "lng": "en-US",
                                "load": "all",
                                "missingInterpolationHandler": false,
                                "missingKeyHandler": false,
                                "nonExplicitSupportedLngs": false,
                                "ns": Array [
                                  "translation",
                                ],
                                "nsSeparator": ":",
                                "overloadTranslationOptionHandler": [Function],
                                "parseMissingKeyHandler": false,
                                "partialBundledLanguages": false,
                                "pluralSeparator": "_",
                                "postProcess": false,
                                "postProcessPassResolved": false,
                                "preload": false,
                                "resources": Object {
                                  "en-US": Object {
                                    "translation": Object {
                                      "backend": Object {
                                        "dashboard": Object {
                                          "reader_stats": "Readers this week",
                                          "stats_change": "Change from last week",
                                        },
                                      },
                                      "date_fns": null,
                                      "forms": Object {
                                        "upload": Object {
                                          "image_preview": "<0></0><br/><1></1>",
                                        },
                                      },
                                    },
                                  },
                                },
                                "returnEmptyString": true,
                                "returnNull": true,
                                "returnObjects": false,
                                "returnedObjectHandler": false,
                                "saveMissing": false,
                                "saveMissingPlurals": true,
                                "saveMissingTo": "fallback",
                                "simplifyPluralSuffix": true,
                                "supportedLngs": false,
                                "updateMissing": false,
                              },
                              "resolvedLanguage": "en-US",
                              "store": Object {
                                "en-US": Object {
                                  "translation": Object {
                                    "backend": Object {
                                      "dashboard": Object {
                                        "reader_stats": "Readers this week",
                                        "stats_change": "Change from last week",
                                      },
                                    },
                                    "date_fns": null,
                                    "forms": Object {
                                      "upload": Object {
                                        "image_preview": "<0></0><br/><1></1>",
                                      },
                                    },
                                  },
                                },
                              },
                            }
                          }
                          image="/some/image.jpg"
                          t={[Function]}
                          tReady={true}
                        >
                          <div
                            className="contents-image-preview"
                            data-id="preview"
                          >
                            <div
                              className="message"
                            >
                              <p
                                className="secondary"
                              >
                                <Trans
                                  components={
                                    Array [
                                      <button
                                        className="form-dropzone__inline-button"
                                        data-id="remove"
                                        onClick={[Function]}
                                        type="button"
                                      />,
                                      <span
                                        className="form-dropzone__upload-prompt"
                                      />,
                                    ]
                                  }
                                  i18nKey="forms.upload.image_preview"
                                >
                                  <button
                                    className="form-dropzone__inline-button"
                                    data-id="remove"
                                    key="0"
                                    onClick={[Function]}
                                    type="button"
                                  />
                                  <br
                                    key="br-1"
                                  />
                                  <span
                                    className="form-dropzone__upload-prompt"
                                    key="2"
                                  />
                                </Trans>
                              </p>
                            </div>
                            <img
                              alt="image_preview_alt"
                              className="preview"
                              src="/some/image.jpg"
                            />
                          </div>
                        </FormUploadImagePreview>
                      </withI18nextTranslation(FormUploadImagePreview)>
                    </FormUploadPreview>
                  </div>
                </Component>
                <Instructions
                  id="upload-instructions-1"
                  instructions={null}
                />
              </div>
            </Errorable>
          </div>
        </Form.Upload.Base>
      </mockConstructor>
    </Form.Upload>
  </Form.Setter('Form.Upload)>
</HigherOrder.FetchData('Form.Upload)>
`;

exports[`global/components/form/Upload matches the snapshot 1`] = `
<HigherOrder.FetchData('Form.Upload)
  accepts="images"
  initialValue="/some/image.jpg"
  label="Cover"
  layout="portrait"
  remove="attributes[avatarRemove]"
  set={[MockFunction]}
  setOther={[MockFunction]}
>
  <Form.Setter('Form.Upload)
    accepts="images"
    actions={
      Object {
        "set": [Function],
      }
    }
    dirtyModel={Object {}}
    getModelValue={[Function]}
    initialValue="/some/image.jpg"
    label="Cover"
    layout="portrait"
    remove="attributes[avatarRemove]"
    sessionKey="1234"
    set={[MockFunction]}
    setOther={[MockFunction]}
    sourceModel={Object {}}
    submitKey={null}
  >
    <Form.Upload
      accepts="images"
      getModelValue={[Function]}
      initialValue="/some/image.jpg"
      label="Cover"
      layout="portrait"
      remove="attributes[avatarRemove]"
      sessionKey="1234"
      set={[MockFunction]}
      setOther={[MockFunction]}
      submitKey={null}
    >
      <mockConstructor>
        <Form.Upload.Base
          accepts={
            Object {
              "accepts": "image/*",
              "extensions": "gif, jpeg, jpg, png",
            }
          }
          getModelValue={[Function]}
          idForError="upload-error-1"
          idForInstructions="upload-instructions-1"
          initialValue="/some/image.jpg"
          inputId="upload-1"
          label="Cover"
          layout="portrait"
          remove="attributes[avatarRemove]"
          sessionKey="1234"
          submitKey={null}
          updateValue={[Function]}
          wide={false}
        >
          <div
            className="form-input"
          >
            <Errorable
              className="form-input"
              containerStyle={Object {}}
              idForError="upload-error-1"
              label="Cover"
            >
              <div
                className="form-input"
                style={Object {}}
              >
                <label
                  className=""
                  htmlFor="upload-1"
                >
                  Cover
                </label>
                <Component
                  onDrop={[Function]}
                >
                  <div
                    onDrop={[Function]}
                  >
                    <input />
                    <FormUploadPreview
                      fileName={null}
                      handleRemove={[Function]}
                      preview="/some/image.jpg"
                    >
                      <withI18nextTranslation(FormUploadImagePreview)
                        handleRemove={[Function]}
                        image="/some/image.jpg"
                      >
                        <FormUploadImagePreview
                          handleRemove={[Function]}
                          i18n={
                            Object {
                              "language": "en-US",
                              "languages": Array [
                                "en-US",
                                "en",
                              ],
                              "options": Object {
                                "appendNamespaceToCIMode": false,
                                "appendNamespaceToMissingKey": false,
                                "contextSeparator": "_",
                                "debug": false,
                                "defaultNS": Array [
                                  "translation",
                                ],
                                "fallbackLng": Array [
                                  "en-US",
                                ],
                                "fallbackNS": false,
                                "ignoreJSONStructure": true,
                                "initImmediate": true,
                                "interpolation": Object {
                                  "escapeValue": true,
                                  "format": [Function],
                                  "formatSeparator": ",",
                                  "maxReplaces": 1000,
                                  "nestingOptionsSeparator": ",",
                                  "nestingPrefix": "$t(",
                                  "nestingSuffix": ")",
                                  "prefix": "{{",
                                  "skipOnVariables": true,
                                  "suffix": "}}",
                                  "unescapePrefix": "-",
                                },
                                "joinArrays": false,
                                "keySeparator": ".",
                                "lng": "en-US",
                                "load": "all",
                                "missingInterpolationHandler": false,
                                "missingKeyHandler": false,
                                "nonExplicitSupportedLngs": false,
                                "ns": Array [
                                  "translation",
                                ],
                                "nsSeparator": ":",
                                "overloadTranslationOptionHandler": [Function],
                                "parseMissingKeyHandler": false,
                                "partialBundledLanguages": false,
                                "pluralSeparator": "_",
                                "postProcess": false,
                                "postProcessPassResolved": false,
                                "preload": false,
                                "resources": Object {
                                  "en-US": Object {
                                    "translation": Object {
                                      "backend": Object {
                                        "dashboard": Object {
                                          "reader_stats": "Readers this week",
                                          "stats_change": "Change from last week",
                                        },
                                      },
                                      "date_fns": null,
                                      "forms": Object {
                                        "upload": Object {
                                          "image_preview": "<0></0><br/><1></1>",
                                        },
                                      },
                                    },
                                  },
                                },
                                "returnEmptyString": true,
                                "returnNull": true,
                                "returnObjects": false,
                                "returnedObjectHandler": false,
                                "saveMissing": false,
                                "saveMissingPlurals": true,
                                "saveMissingTo": "fallback",
                                "simplifyPluralSuffix": true,
                                "supportedLngs": false,
                                "updateMissing": false,
                              },
                              "resolvedLanguage": "en-US",
                              "store": Object {
                                "en-US": Object {
                                  "translation": Object {
                                    "backend": Object {
                                      "dashboard": Object {
                                        "reader_stats": "Readers this week",
                                        "stats_change": "Change from last week",
                                      },
                                    },
                                    "date_fns": null,
                                    "forms": Object {
                                      "upload": Object {
                                        "image_preview": "<0></0><br/><1></1>",
                                      },
                                    },
                                  },
                                },
                              },
                            }
                          }
                          image="/some/image.jpg"
                          t={[Function]}
                          tReady={true}
                        >
                          <div
                            className="contents-image-preview"
                            data-id="preview"
                          >
                            <div
                              className="message"
                            >
                              <p
                                className="secondary"
                              >
                                <Trans
                                  components={
                                    Array [
                                      <button
                                        className="form-dropzone__inline-button"
                                        data-id="remove"
                                        onClick={[Function]}
                                        type="button"
                                      />,
                                      <span
                                        className="form-dropzone__upload-prompt"
                                      />,
                                    ]
                                  }
                                  i18nKey="forms.upload.image_preview"
                                >
                                  <button
                                    className="form-dropzone__inline-button"
                                    data-id="remove"
                                    key="0"
                                    onClick={[Function]}
                                    type="button"
                                  />
                                  <br
                                    key="br-1"
                                  />
                                  <span
                                    className="form-dropzone__upload-prompt"
                                    key="2"
                                  />
                                </Trans>
                              </p>
                            </div>
                            <img
                              alt="image_preview_alt"
                              className="preview"
                              src="/some/image.jpg"
                            />
                          </div>
                        </FormUploadImagePreview>
                      </withI18nextTranslation(FormUploadImagePreview)>
                    </FormUploadPreview>
                  </div>
                </Component>
                <Instructions
                  id="upload-instructions-1"
                  instructions={null}
                />
              </div>
            </Errorable>
          </div>
        </Form.Upload.Base>
      </mockConstructor>
    </Form.Upload>
  </Form.Setter('Form.Upload)>
</HigherOrder.FetchData('Form.Upload)>
`;
