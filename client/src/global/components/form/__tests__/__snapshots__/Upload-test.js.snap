// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`global/components/form/Upload When there is no remove prop matches the snapshot 1`] = `
<HigherOrder.FetchData('Form.Upload)
  accepts="images"
  initialValue="/some/image.jpg"
  label="Cover"
  layout="portrait"
  set={[MockFunction]}
  setOther={[MockFunction]}
>
  <Form.Setter('Form.Upload)
    accepts="images"
    actions={
      Object {
        "set": [Function],
      }
    }
    dirtyModel={Object {}}
    getModelValue={[Function]}
    initialValue="/some/image.jpg"
    label="Cover"
    layout="portrait"
    sessionKey="1234"
    set={[MockFunction]}
    setOther={[MockFunction]}
    sourceModel={Object {}}
    submitKey={null}
  >
    <Form.Upload
      accepts="images"
      getModelValue={[Function]}
      initialValue="/some/image.jpg"
      label="Cover"
      layout="portrait"
      sessionKey="1234"
      set={[MockFunction]}
      setOther={[MockFunction]}
      submitKey={null}
    >
      <mockConstructor>
        <Form.Upload.Base
          accepts={
            Object {
              "accepts": "image/*",
              "extensions": "gif, jpeg, jpg, png",
            }
          }
          getModelValue={[Function]}
          idForError="upload-error-1"
          idForInstructions="upload-instructions-1"
          initialValue="/some/image.jpg"
          inputId="upload-1"
          label="Cover"
          layout="portrait"
          sessionKey="1234"
          submitKey={null}
          updateValue={[Function]}
          wide={false}
        >
          <div
            className="form-input"
          >
            <Errorable
              className="form-input"
              containerStyle={Object {}}
              idForError="upload-error-1"
              label="Cover"
            >
              <div
                className="form-input"
                style={Object {}}
              >
                <label
                  className=""
                  htmlFor="upload-1"
                >
                  Cover
                </label>
                <react-dropzone
                  accept="image/*"
                  className="form-dropzone style-portrait"
                  inputProps={
                    Object {
                      "aria-describedby": "upload-error-1 upload-instructions-1",
                      "id": "upload-1",
                    }
                  }
                  multiple={false}
                  onDrop={[Function]}
                >
                  <FormUploadPreview
                    fileName={null}
                    handleRemove={[Function]}
                    preview="/some/image.jpg"
                  >
                    <FormUploadImagePreview
                      handleRemove={[Function]}
                      image="/some/image.jpg"
                    >
                      <div
                        className="contents-image-preview"
                        data-id="preview"
                      >
                        <div
                          className="message"
                        >
                          <p
                            className="secondary"
                          >
                            <button
                              className="form-dropzone__inline-button"
                              data-id="remove"
                              onClick={[Function]}
                              type="button"
                            >
                              Remove this image
                            </button>
                            <br />
                            or
                             
                            <button
                              aria-hidden={true}
                              className="form-dropzone__inline-button"
                              tabIndex="-1"
                              type="button"
                            >
                              Upload an image
                            </button>
                          </p>
                        </div>
                        <img
                          alt="Upload preview"
                          className="preview"
                          src="/some/image.jpg"
                        />
                        <span
                          className="screen-reader-text"
                        >
                          Upload Preview
                        </span>
                      </div>
                    </FormUploadImagePreview>
                  </FormUploadPreview>
                </react-dropzone>
                <Instructions
                  id="upload-instructions-1"
                  instructions={null}
                />
              </div>
            </Errorable>
          </div>
        </Form.Upload.Base>
      </mockConstructor>
    </Form.Upload>
  </Form.Setter('Form.Upload)>
</HigherOrder.FetchData('Form.Upload)>
`;

exports[`global/components/form/Upload matches the snapshot 1`] = `
<HigherOrder.FetchData('Form.Upload)
  accepts="images"
  initialValue="/some/image.jpg"
  label="Cover"
  layout="portrait"
  remove="attributes[avatarRemove]"
  set={[MockFunction]}
  setOther={[MockFunction]}
>
  <Form.Setter('Form.Upload)
    accepts="images"
    actions={
      Object {
        "set": [Function],
      }
    }
    dirtyModel={Object {}}
    getModelValue={[Function]}
    initialValue="/some/image.jpg"
    label="Cover"
    layout="portrait"
    remove="attributes[avatarRemove]"
    sessionKey="1234"
    set={[MockFunction]}
    setOther={[MockFunction]}
    sourceModel={Object {}}
    submitKey={null}
  >
    <Form.Upload
      accepts="images"
      getModelValue={[Function]}
      initialValue="/some/image.jpg"
      label="Cover"
      layout="portrait"
      remove="attributes[avatarRemove]"
      sessionKey="1234"
      set={[MockFunction]}
      setOther={[MockFunction]}
      submitKey={null}
    >
      <mockConstructor>
        <Form.Upload.Base
          accepts={
            Object {
              "accepts": "image/*",
              "extensions": "gif, jpeg, jpg, png",
            }
          }
          getModelValue={[Function]}
          idForError="upload-error-1"
          idForInstructions="upload-instructions-1"
          initialValue="/some/image.jpg"
          inputId="upload-1"
          label="Cover"
          layout="portrait"
          remove="attributes[avatarRemove]"
          sessionKey="1234"
          submitKey={null}
          updateValue={[Function]}
          wide={false}
        >
          <div
            className="form-input"
          >
            <Errorable
              className="form-input"
              containerStyle={Object {}}
              idForError="upload-error-1"
              label="Cover"
            >
              <div
                className="form-input"
                style={Object {}}
              >
                <label
                  className=""
                  htmlFor="upload-1"
                >
                  Cover
                </label>
                <react-dropzone
                  accept="image/*"
                  className="form-dropzone style-portrait"
                  inputProps={
                    Object {
                      "aria-describedby": "upload-error-1 upload-instructions-1",
                      "id": "upload-1",
                    }
                  }
                  multiple={false}
                  onDrop={[Function]}
                >
                  <FormUploadPreview
                    fileName={null}
                    handleRemove={[Function]}
                    preview="/some/image.jpg"
                  >
                    <FormUploadImagePreview
                      handleRemove={[Function]}
                      image="/some/image.jpg"
                    >
                      <div
                        className="contents-image-preview"
                        data-id="preview"
                      >
                        <div
                          className="message"
                        >
                          <p
                            className="secondary"
                          >
                            <button
                              className="form-dropzone__inline-button"
                              data-id="remove"
                              onClick={[Function]}
                              type="button"
                            >
                              Remove this image
                            </button>
                            <br />
                            or
                             
                            <button
                              aria-hidden={true}
                              className="form-dropzone__inline-button"
                              tabIndex="-1"
                              type="button"
                            >
                              Upload an image
                            </button>
                          </p>
                        </div>
                        <img
                          alt="Upload preview"
                          className="preview"
                          src="/some/image.jpg"
                        />
                        <span
                          className="screen-reader-text"
                        >
                          Upload Preview
                        </span>
                      </div>
                    </FormUploadImagePreview>
                  </FormUploadPreview>
                </react-dropzone>
                <Instructions
                  id="upload-instructions-1"
                  instructions={null}
                />
              </div>
            </Errorable>
          </div>
        </Form.Upload.Base>
      </mockConstructor>
    </Form.Upload>
  </Form.Setter('Form.Upload)>
</HigherOrder.FetchData('Form.Upload)>
`;
