// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`global/components/sign-in-up/UpdateForm matches the snapshot 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "test-key",
        "pathname": "/",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "test-key",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "test-key",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <HelmetProvider
      context={
        Object {
          "helmet": Object {
            "base": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "bodyAttributes": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "htmlAttributes": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "link": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "meta": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "noscript": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "priority": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "script": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "style": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
            "title": Object {
              "toComponent": [Function],
              "toString": [Function],
            },
          },
        }
      }
    >
      <Provider
        store={
          Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <I18nextProvider>
          <UpdateFormContainer
            authentication={
              Object {
                "authenticated": true,
                "currentUser": Object {
                  "attributes": Object {
                    "abilities": Object {
                      "create": true,
                      "createEntitlements": true,
                      "createPermissions": true,
                      "createResourceCollections": true,
                      "createResources": true,
                      "createTexts": true,
                      "createTwitterQueries": true,
                      "delete": true,
                      "manageEntitlements": true,
                      "manageEvents": true,
                      "managePermissions": true,
                      "manageResourceCollections": true,
                      "manageResources": true,
                      "manageSocials": true,
                      "manageTexts": true,
                      "manageTwitterQueries": true,
                      "read": true,
                      "readDeleted": true,
                      "readDrafts": true,
                      "readLog": true,
                      "readSecrets": true,
                      "update": true,
                      "updateMakers": true,
                    },
                    "avatarStyles": Object {},
                    "classAbilities": Object {
                      "annotation": Object {
                        "create": true,
                        "read": true,
                      },
                      "comment": Object {
                        "create": true,
                        "read": true,
                      },
                      "permission": Object {
                        "create": true,
                        "read": true,
                      },
                      "project": Object {
                        "create": true,
                        "read": true,
                      },
                      "projectCollection": Object {
                        "create": true,
                        "read": true,
                        "update": true,
                      },
                      "resource": Object {
                        "create": true,
                        "read": true,
                      },
                      "settings": Object {
                        "create": true,
                        "read": true,
                        "update": true,
                      },
                      "statistics": Object {
                        "create": true,
                        "read": true,
                      },
                      "subject": Object {
                        "create": true,
                        "read": true,
                      },
                      "text": Object {
                        "create": true,
                        "read": true,
                        "update": true,
                      },
                      "user": Object {
                        "create": true,
                        "read": true,
                        "update": true,
                      },
                      "version": Object {
                        "create": true,
                        "read": true,
                      },
                    },
                    "email": "test@cic-fake.gotcha",
                    "firstName": "Rowan",
                    "fullName": "Rowan Ida",
                    "isCurrentUser": true,
                    "kind": "admin",
                    "lastName": "Ida",
                    "role": "admin",
                  },
                  "id": "AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE",
                  "relationships": Object {},
                  "type": "users",
                },
              }
            }
            dispatch={[Function]}
            hideSignInUpOverlay={[Function]}
            mode="new"
          >
            <section
              className="sign-in-up-update"
            >
              <mockConstructor>
                <form
                  aria-labelledby={1}
                  autoComplete="off"
                  method="post"
                  onSubmit={[Function]}
                  tabIndex={-1}
                >
                  <h2
                    className="screen-reader-text"
                    id={1}
                  >
                    Account Update
                  </h2>
                  <div>
                    <h4
                      className="form-heading"
                    >
                      Congratulations!
                    </h4>
                    <p
                      className="overlay-copy"
                    >
                      Your account has been successfully created and you are now
                logged in to Manifold. From now on, I'm going to call you
                    </p>
                    <h4
                      className="nickname"
                    >
                      Rowan
                    </h4>
                  </div>
                  <div
                    className="row-1-p"
                  >
                    <div>
                      <p
                        className="overlay-copy"
                      >
                        Would you like me to call you something else?
                      </p>
                    </div>
                    <div
                      className="row-1-p"
                    >
                      <Errorable
                        className="form-input"
                        containerStyle={Object {}}
                        errors={Array []}
                        idForError="update-nickname-error"
                        name="attributes[nickname]"
                      >
                        <div
                          className="form-input"
                          style={Object {}}
                        >
                          <input
                            aria-describedby="update-nickname-error"
                            aria-labelledby="update-nickname-label"
                            id="update-nickname"
                            name="nickname"
                            onChange={[Function]}
                            placeholder="Nickname"
                            type="text"
                            value=""
                          />
                        </div>
                      </Errorable>
                    </div>
                    <div
                      className="row-1-p"
                    >
                      <p
                        className="overlay-copy"
                      >
                        Do you want to edit your account information?
                      </p>
                      <Errorable
                        className="form-input"
                        containerStyle={Object {}}
                        errors={Array []}
                        idForError="update-firstName-error"
                        name="attributes[firstName]"
                      >
                        <div
                          className="form-input"
                          style={Object {}}
                        >
                          <label
                            htmlFor="update-firstName"
                          >
                            First Name
                          </label>
                          <input
                            aria-describedby="update-firstName-error"
                            id="update-firstName"
                            name="firstName"
                            onChange={[Function]}
                            placeholder="First name"
                            type="text"
                            value="Rowan"
                          />
                        </div>
                      </Errorable>
                      <Errorable
                        className="form-input"
                        containerStyle={Object {}}
                        errors={Array []}
                        idForError="update-lastName-error"
                        name="attributes[lastName]"
                      >
                        <div
                          className="form-input"
                          style={Object {}}
                        >
                          <label
                            htmlFor="update-lastName"
                          >
                            Last Name
                          </label>
                          <input
                            aria-describedby="update-lastName-error"
                            id="update-lastName"
                            name="lastName"
                            onChange={[Function]}
                            placeholder="Last name"
                            type="text"
                            value="Ida"
                          />
                        </div>
                      </Errorable>
                      <Errorable
                        className="form-input"
                        containerStyle={Object {}}
                        errors={Array []}
                        idForError="update-email-error"
                        name="attributes[email]"
                      >
                        <div
                          className="form-input"
                          style={Object {}}
                        >
                          <label
                            htmlFor="update-email"
                          >
                            Email
                          </label>
                          <input
                            aria-describedby="update-email-error"
                            id="update-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Email"
                            type="text"
                            value="test@cic-fake.gotcha"
                          />
                        </div>
                      </Errorable>
                      <Errorable
                        className="form-input"
                        containerStyle={Object {}}
                        errors={Array []}
                        idForError="update-password-error"
                        name="attributes[password]"
                      >
                        <div
                          className="form-input"
                          style={Object {}}
                        >
                          <label
                            htmlFor="update-password"
                          >
                            Password
                          </label>
                          <input
                            aria-describedby="update-password-error"
                            id="update-password"
                            name="password"
                            onChange={[Function]}
                            placeholder="New password"
                            type="password"
                            value=""
                          />
                        </div>
                      </Errorable>
                      <Errorable
                        className="form-input"
                        containerStyle={Object {}}
                        errors={Array []}
                        idForError="update-passwordConfirmation-error"
                        name="attributes[passwordConfirmation]"
                      >
                        <div
                          className="form-input"
                          style={Object {}}
                        >
                          <label
                            htmlFor="update-passwordConfirmation"
                          >
                            Confirm Password
                          </label>
                          <input
                            aria-describedby="update-passwordConfirmation-error"
                            id="update-passwordConfirmation"
                            name="passwordConfirmation"
                            onChange={[Function]}
                            placeholder="Confirm new password"
                            type="password"
                            value=""
                          />
                        </div>
                      </Errorable>
                    </div>
                  </div>
                  <div
                    className="row-1-p"
                  >
                    <div
                      className="form-input form-error"
                    >
                      <input
                        className="button-secondary button-secondary--with-room"
                        type="submit"
                        value="Save Changes"
                      />
                    </div>
                  </div>
                </form>
              </mockConstructor>
              <div
                className="subscriptions"
              >
                <span
                  className="subscriptions__label"
                >
                  Adjust your settings for email notifications:
                </span>
                <button
                  className="button-secondary button-secondary--outlined button-secondary--color-white"
                  onClick={[Function]}
                >
                  <span
                    className="button-secondary__text"
                  >
                    Notification Settings
                  </span>
                  <IconComposer
                    className="button-secondary__icon"
                    fill="currentColor"
                    icon="arrowLongRight16"
                    size="default"
                    svgProps={
                      Object {
                        "aria-hidden": true,
                      }
                    }
                  >
                    <ArrowLongRight
                      className="button-secondary__icon svg-icon--arrowLongRight16"
                      fill="currentColor"
                      icon="arrowLongRight16"
                      size="default"
                      stroke="currentColor"
                      svgProps={
                        Object {
                          "aria-hidden": true,
                        }
                      }
                    >
                      <svg
                        aria-hidden={true}
                        className="manicon-svg button-secondary__icon svg-icon--arrowLongRight16"
                        fill="currentColor"
                        height={16}
                        viewBox="0 0 24 16"
                        width={24}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M19.9210555,8.50098377 L2,8.50098377 L2,7.49848233 L19.9183709,7.49848233 L14.6653905,2.76142495 L15.3486096,2 L22.0012062,7.99920999 L15.3651285,14 L14.6808716,13.2395122 L19.9210555,8.50098377 Z"
                        />
                      </svg>
                    </ArrowLongRight>
                  </IconComposer>
                </button>
              </div>
            </section>
          </UpdateFormContainer>
        </I18nextProvider>
      </Provider>
    </HelmetProvider>
  </Router>
</MemoryRouter>
`;
